#ifndef MODBUS_REGISTERS_H
#define MODBUS_REGISTERS_H

#include <stdint.h>
#include <stdbool.h>

/**
 * @file    modbus_registers.h
 * @brief   Modbus register mapping definitions
 * @note    Generated by Modbus Configuration Tool
 */

/* Enable optimized register mapping mode */
#define MODBUS_USE_REGISTER_MAPPING     (1)

/* Device Configuration */
#define MODBUS_DEVICE_TYPE_SLAVE            (1)
#define MODBUS_SLAVE_ID                     (1)

/* Register Counts (Optimized Memory) */
#define MODBUS_COIL_COUNT                   (0)
#define MODBUS_DISCRETE_INPUT_COUNT         (0)
#define MODBUS_INPUT_REGISTER_COUNT         (3)
#define MODBUS_HOLDING_REGISTER_COUNT       (5)

/* Register Address Definitions */

/* HOLDING_REG Addresses */
#define MODBUS_HOLDING_REG_0000             (0)
#define MODBUS_HOLDING_REG_0001             (1)
#define MODBUS_HOLDING_REG_0100             (100)
#define MODBUS_HOLDING_REG_0101             (101)
#define MODBUS_HOLDING_REG_0102             (102)

/* INPUT_REG Addresses */
#define MODBUS_INPUT_REG_0003               (3)
#define MODBUS_INPUT_REG_0004               (4)
#define MODBUS_INPUT_REG_0006               (6)

/* Register Mapping Indices */
/* Use these indices to access g_modbus_xxx_registers[] arrays */
#define MODBUS_HOLDING_REG_0000_IDX             (0)
#define MODBUS_HOLDING_REG_0001_IDX             (1)
#define MODBUS_HOLDING_REG_0100_IDX             (2)
#define MODBUS_HOLDING_REG_0101_IDX             (3)
#define MODBUS_HOLDING_REG_0102_IDX             (4)
#define MODBUS_INPUT_REG_0003_IDX               (0)
#define MODBUS_INPUT_REG_0004_IDX               (1)
#define MODBUS_INPUT_REG_0006_IDX               (2)

/* Register Ranges Configuration */
#define MODBUS_REGISTER_RANGES_COUNT        (4)

/* Register range structure */
typedef struct {
    uint16_t start_addr;        /* Starting internal address */
    uint16_t count;             /* Number of consecutive registers */
    uint8_t  reg_type;          /* Register type (0=coil, 1=DI, 3=IR, 4=HR) */
} modbus_register_range_t;

/* Register mapping structure */
typedef struct {
    uint16_t internal_addr;     /* Internal address (for Modbus protocol) */
    uint16_t array_index;       /* Index in data array */
} modbus_register_map_t;

/* External variable declarations */
extern const modbus_register_range_t g_modbus_register_ranges[];
extern const modbus_register_map_t g_modbus_holding_register_map[];
extern const modbus_register_map_t g_modbus_input_register_map[];
extern const modbus_register_map_t g_modbus_coil_map[];
extern const modbus_register_map_t g_modbus_discrete_input_map[];

extern uint16_t g_modbus_holding_registers[];
extern uint16_t g_modbus_input_registers[];
extern uint8_t  g_modbus_coils[];
extern uint8_t  g_modbus_discrete_inputs[];

/* Function prototypes */
bool modbus_is_register_valid(uint16_t addr, uint8_t reg_type);
int modbus_get_register_ranges(const modbus_register_range_t **ranges);
void modbus_registers_init(void);

#endif /* MODBUS_REGISTERS_H */
