
ModbusRTUSlaveExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e98  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08003fa4  08003fa4  00004fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f8  080041f8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080041f8  080041f8  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080041f8  080041f8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f8  080041f8  000051f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041fc  080041fc  000051fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004200  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  2000000c  0800420c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  0800420c  000063ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ede2  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b2  00000000  00000000  00014e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000176d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae6  00000000  00000000  000184e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a0c  00000000  00000000  00018fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107f9  00000000  00000000  000309da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa0c  00000000  00000000  000411d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbbdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003918  00000000  00000000  000cbc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000cf53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f8c 	.word	0x08003f8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003f8c 	.word	0x08003f8c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b18      	ldr	r3, [pc, #96]	@ (80001c4 <MX_GPIO_Init+0x78>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a17      	ldr	r2, [pc, #92]	@ (80001c4 <MX_GPIO_Init+0x78>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b15      	ldr	r3, [pc, #84]	@ (80001c4 <MX_GPIO_Init+0x78>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b12      	ldr	r3, [pc, #72]	@ (80001c4 <MX_GPIO_Init+0x78>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a11      	ldr	r2, [pc, #68]	@ (80001c4 <MX_GPIO_Init+0x78>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b0f      	ldr	r3, [pc, #60]	@ (80001c4 <MX_GPIO_Init+0x78>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TXEN_GPIO_Port, RS485_TXEN_Pin, GPIO_PIN_RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000196:	480c      	ldr	r0, [pc, #48]	@ (80001c8 <MX_GPIO_Init+0x7c>)
 8000198:	f000 ff58 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS485_TXEN_Pin */
  GPIO_InitStruct.Pin = RS485_TXEN_Pin;
 800019c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80001a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001a2:	2301      	movs	r3, #1
 80001a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001a6:	2301      	movs	r3, #1
 80001a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001aa:	2302      	movs	r3, #2
 80001ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RS485_TXEN_GPIO_Port, &GPIO_InitStruct);
 80001ae:	f107 0308 	add.w	r3, r7, #8
 80001b2:	4619      	mov	r1, r3
 80001b4:	4804      	ldr	r0, [pc, #16]	@ (80001c8 <MX_GPIO_Init+0x7c>)
 80001b6:	f000 fd09 	bl	8000bcc <HAL_GPIO_Init>

}
 80001ba:	bf00      	nop
 80001bc:	3718      	adds	r7, #24
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40021000 	.word	0x40021000
 80001c8:	40010800 	.word	0x40010800

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fb06 	bl	80007e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f80e 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f7ff ffb8 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 fa3a 	bl	8000654 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80001e0:	f000 f9c8 	bl	8000574 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  modbus_easy_init(1, 9600);  // Slave ID=1, 9600 baud
 80001e4:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 80001e8:	2001      	movs	r0, #1
 80001ea:	f003 fe59 	bl	8003ea0 <modbus_easy_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  modbus_easy_poll();
 80001ee:	f003 fe87 	bl	8003f00 <modbus_easy_poll>
 80001f2:	e7fc      	b.n	80001ee <main+0x22>

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	@ 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	@ 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f003 fe96 	bl	8003f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000216:	2301      	movs	r3, #1
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800021e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000230:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000232:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	4618      	mov	r0, r3
 800023e:	f000 ff1d 	bl	800107c <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000248:	f000 f88e 	bl	8000368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2302      	movs	r3, #2
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2102      	movs	r1, #2
 8000266:	4618      	mov	r0, r3
 8000268:	f001 f98a 	bl	8001580 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000272:	f000 f879 	bl	8000368 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	@ 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <HAL_UART_RxCpltCallback>:
 * @brief  UART Receive Complete Callback
 * @param  huart: UART handle
 * @note   Được gọi TỰ ĐỘNG từ HAL_UART_IRQHandler() trong stm32f1xx_it.c
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a08      	ldr	r2, [pc, #32]	@ (80002b0 <HAL_UART_RxCpltCallback+0x30>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d10a      	bne.n	80002a8 <HAL_UART_RxCpltCallback+0x28>
    /* Lấy byte đã nhận */
    uint8_t received_byte = modbus_port_get_rx_byte();
 8000292:	f002 ff2b 	bl	80030ec <modbus_port_get_rx_byte>
 8000296:	4603      	mov	r3, r0
 8000298:	73fb      	strb	r3, [r7, #15]

    /* Gửi vào Modbus */
    modbus_rtu_rx_byte(&g_modbus_ctx, received_byte);
 800029a:	7bfb      	ldrb	r3, [r7, #15]
 800029c:	4619      	mov	r1, r3
 800029e:	4805      	ldr	r0, [pc, #20]	@ (80002b4 <HAL_UART_RxCpltCallback+0x34>)
 80002a0:	f003 f924 	bl	80034ec <modbus_rtu_rx_byte>

    /* Chuẩn bị nhận byte tiếp theo */
    modbus_port_uart_receive_next();
 80002a4:	f002 ff2c 	bl	8003100 <modbus_port_uart_receive_next>
  }
}
 80002a8:	bf00      	nop
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40013800 	.word	0x40013800
 80002b4:	2000016c 	.word	0x2000016c

080002b8 <HAL_UART_ErrorCallback>:
 * @brief  UART Error Callback
 * @param  huart: UART handle
 * @note   Được gọi tự động từ HAL_UART_IRQHandler() nếu có lỗi
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b087      	sub	sp, #28
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a19      	ldr	r2, [pc, #100]	@ (800032c <HAL_UART_ErrorCallback+0x74>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d12b      	bne.n	8000322 <HAL_UART_ErrorCallback+0x6a>
    /* Clear all error flags */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	617b      	str	r3, [r7, #20]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	697b      	ldr	r3, [r7, #20]
    __HAL_UART_CLEAR_FEFLAG(huart);
 80002e0:	2300      	movs	r3, #0
 80002e2:	613b      	str	r3, [r7, #16]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	613b      	str	r3, [r7, #16]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	613b      	str	r3, [r7, #16]
 80002f4:	693b      	ldr	r3, [r7, #16]
    __HAL_UART_CLEAR_NEFLAG(huart);
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]
    __HAL_UART_CLEAR_PEFLAG(huart);
 800030c:	2300      	movs	r3, #0
 800030e:	60bb      	str	r3, [r7, #8]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
  }
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40013800 	.word	0x40013800

08000330 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  /* Modbus T3.5 timeout timer (TIM2) */
	  if (htim->Instance == TIM2) {
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000340:	d102      	bne.n	8000348 <HAL_TIM_PeriodElapsedCallback+0x18>
	    modbus_rtu_timer_callback(&g_modbus_ctx);
 8000342:	4807      	ldr	r0, [pc, #28]	@ (8000360 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000344:	f003 f8f7 	bl	8003536 <modbus_rtu_timer_callback>
	  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a05      	ldr	r2, [pc, #20]	@ (8000364 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d101      	bne.n	8000356 <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
 8000352:	f000 fa5b 	bl	800080c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000016c 	.word	0x2000016c
 8000364:	40000800 	.word	0x40000800

08000368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800036c:	b672      	cpsid	i
}
 800036e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <Error_Handler+0x8>

08000374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <HAL_MspInit+0x5c>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a14      	ldr	r2, [pc, #80]	@ (80003d0 <HAL_MspInit+0x5c>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6193      	str	r3, [r2, #24]
 8000386:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <HAL_MspInit+0x5c>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000392:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <HAL_MspInit+0x5c>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	4a0e      	ldr	r2, [pc, #56]	@ (80003d0 <HAL_MspInit+0x5c>)
 8000398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800039c:	61d3      	str	r3, [r2, #28]
 800039e:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <HAL_MspInit+0x5c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003aa:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <HAL_MspInit+0x60>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	4a04      	ldr	r2, [pc, #16]	@ (80003d4 <HAL_MspInit+0x60>)
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000
 80003d4:	40010000 	.word	0x40010000

080003d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08e      	sub	sp, #56	@ 0x38
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80003e0:	2300      	movs	r3, #0
 80003e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80003e4:	2300      	movs	r3, #0
 80003e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80003e8:	2300      	movs	r3, #0
 80003ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <HAL_InitTick+0xe8>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a33      	ldr	r2, [pc, #204]	@ (80004c0 <HAL_InitTick+0xe8>)
 80003f4:	f043 0304 	orr.w	r3, r3, #4
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b31      	ldr	r3, [pc, #196]	@ (80004c0 <HAL_InitTick+0xe8>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 0304 	and.w	r3, r3, #4
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000406:	f107 0210 	add.w	r2, r7, #16
 800040a:	f107 0314 	add.w	r3, r7, #20
 800040e:	4611      	mov	r1, r2
 8000410:	4618      	mov	r0, r3
 8000412:	f001 fa25 	bl	8001860 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000416:	6a3b      	ldr	r3, [r7, #32]
 8000418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800041a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800041c:	2b00      	cmp	r3, #0
 800041e:	d103      	bne.n	8000428 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000420:	f001 f9f6 	bl	8001810 <HAL_RCC_GetPCLK1Freq>
 8000424:	6378      	str	r0, [r7, #52]	@ 0x34
 8000426:	e004      	b.n	8000432 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000428:	f001 f9f2 	bl	8001810 <HAL_RCC_GetPCLK1Freq>
 800042c:	4603      	mov	r3, r0
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000434:	4a23      	ldr	r2, [pc, #140]	@ (80004c4 <HAL_InitTick+0xec>)
 8000436:	fba2 2303 	umull	r2, r3, r2, r3
 800043a:	0c9b      	lsrs	r3, r3, #18
 800043c:	3b01      	subs	r3, #1
 800043e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000440:	4b21      	ldr	r3, [pc, #132]	@ (80004c8 <HAL_InitTick+0xf0>)
 8000442:	4a22      	ldr	r2, [pc, #136]	@ (80004cc <HAL_InitTick+0xf4>)
 8000444:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000446:	4b20      	ldr	r3, [pc, #128]	@ (80004c8 <HAL_InitTick+0xf0>)
 8000448:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800044c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800044e:	4a1e      	ldr	r2, [pc, #120]	@ (80004c8 <HAL_InitTick+0xf0>)
 8000450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000452:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000454:	4b1c      	ldr	r3, [pc, #112]	@ (80004c8 <HAL_InitTick+0xf0>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045a:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <HAL_InitTick+0xf0>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000460:	4b19      	ldr	r3, [pc, #100]	@ (80004c8 <HAL_InitTick+0xf0>)
 8000462:	2200      	movs	r2, #0
 8000464:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000466:	4818      	ldr	r0, [pc, #96]	@ (80004c8 <HAL_InitTick+0xf0>)
 8000468:	f001 fa48 	bl	80018fc <HAL_TIM_Base_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000472:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000476:	2b00      	cmp	r3, #0
 8000478:	d11b      	bne.n	80004b2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800047a:	4813      	ldr	r0, [pc, #76]	@ (80004c8 <HAL_InitTick+0xf0>)
 800047c:	f001 fa8e 	bl	800199c <HAL_TIM_Base_Start_IT>
 8000480:	4603      	mov	r3, r0
 8000482:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000486:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800048a:	2b00      	cmp	r3, #0
 800048c:	d111      	bne.n	80004b2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800048e:	201e      	movs	r0, #30
 8000490:	f000 facd 	bl	8000a2e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b0f      	cmp	r3, #15
 8000498:	d808      	bhi.n	80004ac <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800049a:	2200      	movs	r2, #0
 800049c:	6879      	ldr	r1, [r7, #4]
 800049e:	201e      	movs	r0, #30
 80004a0:	f000 faa9 	bl	80009f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004a4:	4a0a      	ldr	r2, [pc, #40]	@ (80004d0 <HAL_InitTick+0xf8>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	6013      	str	r3, [r2, #0]
 80004aa:	e002      	b.n	80004b2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80004ac:	2301      	movs	r3, #1
 80004ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80004b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3738      	adds	r7, #56	@ 0x38
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	431bde83 	.word	0x431bde83
 80004c8:	20000028 	.word	0x20000028
 80004cc:	40000800 	.word	0x40000800
 80004d0:	20000004 	.word	0x20000004

080004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <NMI_Handler+0x4>

080004dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <MemManage_Handler+0x4>

080004ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <BusFault_Handler+0x4>

080004f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <UsageFault_Handler+0x4>

080004fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000530:	4802      	ldr	r0, [pc, #8]	@ (800053c <TIM2_IRQHandler+0x10>)
 8000532:	f001 fab3 	bl	8001a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000070 	.word	0x20000070

08000540 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <TIM4_IRQHandler+0x10>)
 8000546:	f001 faa9 	bl	8001a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000028 	.word	0x20000028

08000554 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000558:	4802      	ldr	r0, [pc, #8]	@ (8000564 <USART1_IRQHandler+0x10>)
 800055a:	f001 ff21 	bl	80023a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200000b8 	.word	0x200000b8

08000568 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_TIM2_Init+0x94>)
 8000592:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000598:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_TIM2_Init+0x94>)
 800059a:	2247      	movs	r2, #71	@ 0x47
 800059c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059e:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_TIM2_Init+0x94>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005a4:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <MX_TIM2_Init+0x94>)
 80005a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ac:	4b16      	ldr	r3, [pc, #88]	@ (8000608 <MX_TIM2_Init+0x94>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_TIM2_Init+0x94>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005b8:	4813      	ldr	r0, [pc, #76]	@ (8000608 <MX_TIM2_Init+0x94>)
 80005ba:	f001 f99f 	bl	80018fc <HAL_TIM_Base_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005c4:	f7ff fed0 	bl	8000368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	4619      	mov	r1, r3
 80005d4:	480c      	ldr	r0, [pc, #48]	@ (8000608 <MX_TIM2_Init+0x94>)
 80005d6:	f001 fb51 	bl	8001c7c <HAL_TIM_ConfigClockSource>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005e0:	f7ff fec2 	bl	8000368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_TIM2_Init+0x94>)
 80005f2:	f001 fd33 	bl	800205c <HAL_TIMEx_MasterConfigSynchronization>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005fc:	f7ff feb4 	bl	8000368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000070 	.word	0x20000070

0800060c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800061c:	d113      	bne.n	8000646 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <HAL_TIM_Base_MspInit+0x44>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a0b      	ldr	r2, [pc, #44]	@ (8000650 <HAL_TIM_Base_MspInit+0x44>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <HAL_TIM_Base_MspInit+0x44>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	201c      	movs	r0, #28
 800063c:	f000 f9db 	bl	80009f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000640:	201c      	movs	r0, #28
 8000642:	f000 f9f4 	bl	8000a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 800065a:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <MX_USART1_UART_Init+0x50>)
 800065c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 800068c:	f001 fd56 	bl	800213c <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000696:	f7ff fe67 	bl	8000368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000b8 	.word	0x200000b8
 80006a4:	40013800 	.word	0x40013800

080006a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a20      	ldr	r2, [pc, #128]	@ (8000744 <HAL_UART_MspInit+0x9c>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d139      	bne.n	800073c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <HAL_UART_MspInit+0xa0>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a1e      	ldr	r2, [pc, #120]	@ (8000748 <HAL_UART_MspInit+0xa0>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <HAL_UART_MspInit+0xa0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <HAL_UART_MspInit+0xa0>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a18      	ldr	r2, [pc, #96]	@ (8000748 <HAL_UART_MspInit+0xa0>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <HAL_UART_MspInit+0xa0>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fe:	2302      	movs	r3, #2
 8000700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000702:	2303      	movs	r3, #3
 8000704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	4619      	mov	r1, r3
 800070c:	480f      	ldr	r0, [pc, #60]	@ (800074c <HAL_UART_MspInit+0xa4>)
 800070e:	f000 fa5d 	bl	8000bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4619      	mov	r1, r3
 8000726:	4809      	ldr	r0, [pc, #36]	@ (800074c <HAL_UART_MspInit+0xa4>)
 8000728:	f000 fa50 	bl	8000bcc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	2025      	movs	r0, #37	@ 0x25
 8000732:	f000 f960 	bl	80009f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000736:	2025      	movs	r0, #37	@ 0x25
 8000738:	f000 f979 	bl	8000a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40013800 	.word	0x40013800
 8000748:	40021000 	.word	0x40021000
 800074c:	40010800 	.word	0x40010800

08000750 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <HAL_UART_MspDeInit+0x38>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d10d      	bne.n	800077e <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000762:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <HAL_UART_MspDeInit+0x3c>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	4a09      	ldr	r2, [pc, #36]	@ (800078c <HAL_UART_MspDeInit+0x3c>)
 8000768:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800076c:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800076e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000772:	4807      	ldr	r0, [pc, #28]	@ (8000790 <HAL_UART_MspDeInit+0x40>)
 8000774:	f000 fbae 	bl	8000ed4 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000778:	2025      	movs	r0, #37	@ 0x25
 800077a:	f000 f966 	bl	8000a4a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40013800 	.word	0x40013800
 800078c:	40021000 	.word	0x40021000
 8000790:	40010800 	.word	0x40010800

08000794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000794:	f7ff fee8 	bl	8000568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000798:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800079a:	490c      	ldr	r1, [pc, #48]	@ (80007cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800079c:	4a0c      	ldr	r2, [pc, #48]	@ (80007d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a09      	ldr	r2, [pc, #36]	@ (80007d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007b0:	4c09      	ldr	r4, [pc, #36]	@ (80007d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007be:	f003 fbc1 	bl	8003f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c2:	f7ff fd03 	bl	80001cc <main>
  bx lr
 80007c6:	4770      	bx	lr
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007d0:	08004200 	.word	0x08004200
  ldr r2, =_sbss
 80007d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007d8:	200003ac 	.word	0x200003ac

080007dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC1_2_IRQHandler>
	...

080007e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <HAL_Init+0x28>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a07      	ldr	r2, [pc, #28]	@ (8000808 <HAL_Init+0x28>)
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 f8f5 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f6:	200f      	movs	r0, #15
 80007f8:	f7ff fdee 	bl	80003d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007fc:	f7ff fdba 	bl	8000374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40022000 	.word	0x40022000

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <HAL_IncTick+0x1c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	@ (800082c <HAL_IncTick+0x20>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a03      	ldr	r2, [pc, #12]	@ (800082c <HAL_IncTick+0x20>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000008 	.word	0x20000008
 800082c:	20000100 	.word	0x20000100

08000830 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b02      	ldr	r3, [pc, #8]	@ (8000840 <HAL_GetTick+0x10>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	20000100 	.word	0x20000100

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	db0b      	blt.n	80008d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f003 021f 	and.w	r2, r3, #31
 80008c0:	4906      	ldr	r1, [pc, #24]	@ (80008dc <__NVIC_EnableIRQ+0x34>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	095b      	lsrs	r3, r3, #5
 80008c8:	2001      	movs	r0, #1
 80008ca:	fa00 f202 	lsl.w	r2, r0, r2
 80008ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100

080008e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	db12      	blt.n	8000918 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	f003 021f 	and.w	r2, r3, #31
 80008f8:	490a      	ldr	r1, [pc, #40]	@ (8000924 <__NVIC_DisableIRQ+0x44>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	095b      	lsrs	r3, r3, #5
 8000900:	2001      	movs	r0, #1
 8000902:	fa00 f202 	lsl.w	r2, r0, r2
 8000906:	3320      	adds	r3, #32
 8000908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800090c:	f3bf 8f4f 	dsb	sy
}
 8000910:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000912:	f3bf 8f6f 	isb	sy
}
 8000916:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	490c      	ldr	r1, [pc, #48]	@ (8000974 <__NVIC_SetPriority+0x4c>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4908      	ldr	r1, [pc, #32]	@ (8000978 <__NVIC_SetPriority+0x50>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	3b04      	subs	r3, #4
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	@ 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f1c3 0307 	rsb	r3, r3, #7
 8000996:	2b04      	cmp	r3, #4
 8000998:	bf28      	it	cs
 800099a:	2304      	movcs	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3304      	adds	r3, #4
 80009a2:	2b06      	cmp	r3, #6
 80009a4:	d902      	bls.n	80009ac <NVIC_EncodePriority+0x30>
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3b03      	subs	r3, #3
 80009aa:	e000      	b.n	80009ae <NVIC_EncodePriority+0x32>
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	401a      	ands	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43d9      	mvns	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	4313      	orrs	r3, r2
         );
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3724      	adds	r7, #36	@ 0x24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff2b 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a08:	f7ff ff40 	bl	800088c <__NVIC_GetPriorityGrouping>
 8000a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	6978      	ldr	r0, [r7, #20]
 8000a14:	f7ff ffb2 	bl	800097c <NVIC_EncodePriority>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff81 	bl	8000928 <__NVIC_SetPriority>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff33 	bl	80008a8 <__NVIC_EnableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff41 	bl	80008e0 <__NVIC_DisableIRQ>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b085      	sub	sp, #20
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d008      	beq.n	8000a90 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2204      	movs	r2, #4
 8000a82:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e020      	b.n	8000ad2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f022 020e 	bic.w	r2, r2, #14
 8000a9e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 0201 	bic.w	r2, r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ab8:	2101      	movs	r1, #1
 8000aba:	fa01 f202 	lsl.w	r2, r1, r2
 8000abe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d005      	beq.n	8000b00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2204      	movs	r2, #4
 8000af8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	73fb      	strb	r3, [r7, #15]
 8000afe:	e051      	b.n	8000ba4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f022 020e 	bic.w	r2, r2, #14
 8000b0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 0201 	bic.w	r2, r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a22      	ldr	r2, [pc, #136]	@ (8000bb0 <HAL_DMA_Abort_IT+0xd4>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d029      	beq.n	8000b7e <HAL_DMA_Abort_IT+0xa2>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a21      	ldr	r2, [pc, #132]	@ (8000bb4 <HAL_DMA_Abort_IT+0xd8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d022      	beq.n	8000b7a <HAL_DMA_Abort_IT+0x9e>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb8 <HAL_DMA_Abort_IT+0xdc>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d01a      	beq.n	8000b74 <HAL_DMA_Abort_IT+0x98>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1e      	ldr	r2, [pc, #120]	@ (8000bbc <HAL_DMA_Abort_IT+0xe0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d012      	beq.n	8000b6e <HAL_DMA_Abort_IT+0x92>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc0 <HAL_DMA_Abort_IT+0xe4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d00a      	beq.n	8000b68 <HAL_DMA_Abort_IT+0x8c>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc4 <HAL_DMA_Abort_IT+0xe8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d102      	bne.n	8000b62 <HAL_DMA_Abort_IT+0x86>
 8000b5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b60:	e00e      	b.n	8000b80 <HAL_DMA_Abort_IT+0xa4>
 8000b62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b66:	e00b      	b.n	8000b80 <HAL_DMA_Abort_IT+0xa4>
 8000b68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b6c:	e008      	b.n	8000b80 <HAL_DMA_Abort_IT+0xa4>
 8000b6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b72:	e005      	b.n	8000b80 <HAL_DMA_Abort_IT+0xa4>
 8000b74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b78:	e002      	b.n	8000b80 <HAL_DMA_Abort_IT+0xa4>
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	e000      	b.n	8000b80 <HAL_DMA_Abort_IT+0xa4>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	4a11      	ldr	r2, [pc, #68]	@ (8000bc8 <HAL_DMA_Abort_IT+0xec>)
 8000b82:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2201      	movs	r2, #1
 8000b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	4798      	blx	r3
    } 
  }
  return status;
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40020008 	.word	0x40020008
 8000bb4:	4002001c 	.word	0x4002001c
 8000bb8:	40020030 	.word	0x40020030
 8000bbc:	40020044 	.word	0x40020044
 8000bc0:	40020058 	.word	0x40020058
 8000bc4:	4002006c 	.word	0x4002006c
 8000bc8:	40020000 	.word	0x40020000

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b08b      	sub	sp, #44	@ 0x2c
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bde:	e169      	b.n	8000eb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000be0:	2201      	movs	r2, #1
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	f040 8158 	bne.w	8000eae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	4a9a      	ldr	r2, [pc, #616]	@ (8000e6c <HAL_GPIO_Init+0x2a0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d05e      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c08:	4a98      	ldr	r2, [pc, #608]	@ (8000e6c <HAL_GPIO_Init+0x2a0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d875      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c0e:	4a98      	ldr	r2, [pc, #608]	@ (8000e70 <HAL_GPIO_Init+0x2a4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d058      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c14:	4a96      	ldr	r2, [pc, #600]	@ (8000e70 <HAL_GPIO_Init+0x2a4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d86f      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c1a:	4a96      	ldr	r2, [pc, #600]	@ (8000e74 <HAL_GPIO_Init+0x2a8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d052      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c20:	4a94      	ldr	r2, [pc, #592]	@ (8000e74 <HAL_GPIO_Init+0x2a8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d869      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c26:	4a94      	ldr	r2, [pc, #592]	@ (8000e78 <HAL_GPIO_Init+0x2ac>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d04c      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c2c:	4a92      	ldr	r2, [pc, #584]	@ (8000e78 <HAL_GPIO_Init+0x2ac>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d863      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c32:	4a92      	ldr	r2, [pc, #584]	@ (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d046      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c38:	4a90      	ldr	r2, [pc, #576]	@ (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d85d      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c3e:	2b12      	cmp	r3, #18
 8000c40:	d82a      	bhi.n	8000c98 <HAL_GPIO_Init+0xcc>
 8000c42:	2b12      	cmp	r3, #18
 8000c44:	d859      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c46:	a201      	add	r2, pc, #4	@ (adr r2, 8000c4c <HAL_GPIO_Init+0x80>)
 8000c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4c:	08000cc7 	.word	0x08000cc7
 8000c50:	08000ca1 	.word	0x08000ca1
 8000c54:	08000cb3 	.word	0x08000cb3
 8000c58:	08000cf5 	.word	0x08000cf5
 8000c5c:	08000cfb 	.word	0x08000cfb
 8000c60:	08000cfb 	.word	0x08000cfb
 8000c64:	08000cfb 	.word	0x08000cfb
 8000c68:	08000cfb 	.word	0x08000cfb
 8000c6c:	08000cfb 	.word	0x08000cfb
 8000c70:	08000cfb 	.word	0x08000cfb
 8000c74:	08000cfb 	.word	0x08000cfb
 8000c78:	08000cfb 	.word	0x08000cfb
 8000c7c:	08000cfb 	.word	0x08000cfb
 8000c80:	08000cfb 	.word	0x08000cfb
 8000c84:	08000cfb 	.word	0x08000cfb
 8000c88:	08000cfb 	.word	0x08000cfb
 8000c8c:	08000cfb 	.word	0x08000cfb
 8000c90:	08000ca9 	.word	0x08000ca9
 8000c94:	08000cbd 	.word	0x08000cbd
 8000c98:	4a79      	ldr	r2, [pc, #484]	@ (8000e80 <HAL_GPIO_Init+0x2b4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d013      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c9e:	e02c      	b.n	8000cfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	623b      	str	r3, [r7, #32]
          break;
 8000ca6:	e029      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	3304      	adds	r3, #4
 8000cae:	623b      	str	r3, [r7, #32]
          break;
 8000cb0:	e024      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	3308      	adds	r3, #8
 8000cb8:	623b      	str	r3, [r7, #32]
          break;
 8000cba:	e01f      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	330c      	adds	r3, #12
 8000cc2:	623b      	str	r3, [r7, #32]
          break;
 8000cc4:	e01a      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	623b      	str	r3, [r7, #32]
          break;
 8000cd2:	e013      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d105      	bne.n	8000ce8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	611a      	str	r2, [r3, #16]
          break;
 8000ce6:	e009      	b.n	8000cfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69fa      	ldr	r2, [r7, #28]
 8000cf0:	615a      	str	r2, [r3, #20]
          break;
 8000cf2:	e003      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
          break;
 8000cf8:	e000      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          break;
 8000cfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	2bff      	cmp	r3, #255	@ 0xff
 8000d00:	d801      	bhi.n	8000d06 <HAL_GPIO_Init+0x13a>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	e001      	b.n	8000d0a <HAL_GPIO_Init+0x13e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2bff      	cmp	r3, #255	@ 0xff
 8000d10:	d802      	bhi.n	8000d18 <HAL_GPIO_Init+0x14c>
 8000d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	e002      	b.n	8000d1e <HAL_GPIO_Init+0x152>
 8000d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1a:	3b08      	subs	r3, #8
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	210f      	movs	r1, #15
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	401a      	ands	r2, r3
 8000d30:	6a39      	ldr	r1, [r7, #32]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 80b1 	beq.w	8000eae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a4c      	ldr	r2, [pc, #304]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b4a      	ldr	r3, [pc, #296]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d64:	4a48      	ldr	r2, [pc, #288]	@ (8000e88 <HAL_GPIO_Init+0x2bc>)
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a40      	ldr	r2, [pc, #256]	@ (8000e8c <HAL_GPIO_Init+0x2c0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d013      	beq.n	8000db8 <HAL_GPIO_Init+0x1ec>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a3f      	ldr	r2, [pc, #252]	@ (8000e90 <HAL_GPIO_Init+0x2c4>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d00d      	beq.n	8000db4 <HAL_GPIO_Init+0x1e8>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e94 <HAL_GPIO_Init+0x2c8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d007      	beq.n	8000db0 <HAL_GPIO_Init+0x1e4>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a3d      	ldr	r2, [pc, #244]	@ (8000e98 <HAL_GPIO_Init+0x2cc>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d101      	bne.n	8000dac <HAL_GPIO_Init+0x1e0>
 8000da8:	2303      	movs	r3, #3
 8000daa:	e006      	b.n	8000dba <HAL_GPIO_Init+0x1ee>
 8000dac:	2304      	movs	r3, #4
 8000dae:	e004      	b.n	8000dba <HAL_GPIO_Init+0x1ee>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x1ee>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e000      	b.n	8000dba <HAL_GPIO_Init+0x1ee>
 8000db8:	2300      	movs	r3, #0
 8000dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dbc:	f002 0203 	and.w	r2, r2, #3
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	4093      	lsls	r3, r2
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dca:	492f      	ldr	r1, [pc, #188]	@ (8000e88 <HAL_GPIO_Init+0x2bc>)
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d006      	beq.n	8000df2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000de4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	492c      	ldr	r1, [pc, #176]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	608b      	str	r3, [r1, #8]
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000df2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	4928      	ldr	r1, [pc, #160]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e0c:	4b23      	ldr	r3, [pc, #140]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	4922      	ldr	r1, [pc, #136]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	60cb      	str	r3, [r1, #12]
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e1a:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	491e      	ldr	r1, [pc, #120]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e34:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4918      	ldr	r1, [pc, #96]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	4914      	ldr	r1, [pc, #80]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d021      	beq.n	8000ea0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	490e      	ldr	r1, [pc, #56]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	600b      	str	r3, [r1, #0]
 8000e68:	e021      	b.n	8000eae <HAL_GPIO_Init+0x2e2>
 8000e6a:	bf00      	nop
 8000e6c:	10320000 	.word	0x10320000
 8000e70:	10310000 	.word	0x10310000
 8000e74:	10220000 	.word	0x10220000
 8000e78:	10210000 	.word	0x10210000
 8000e7c:	10120000 	.word	0x10120000
 8000e80:	10110000 	.word	0x10110000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	40010c00 	.word	0x40010c00
 8000e94:	40011000 	.word	0x40011000
 8000e98:	40011400 	.word	0x40011400
 8000e9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <HAL_GPIO_Init+0x304>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	4909      	ldr	r1, [pc, #36]	@ (8000ed0 <HAL_GPIO_Init+0x304>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eba:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f47f ae8e 	bne.w	8000be0 <HAL_GPIO_Init+0x14>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	372c      	adds	r7, #44	@ 0x2c
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8000ee2:	e09a      	b.n	800101a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 808d 	beq.w	8001014 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8000efa:	4a4e      	ldr	r2, [pc, #312]	@ (8001034 <HAL_GPIO_DeInit+0x160>)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a46      	ldr	r2, [pc, #280]	@ (8001038 <HAL_GPIO_DeInit+0x164>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d013      	beq.n	8000f4c <HAL_GPIO_DeInit+0x78>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a45      	ldr	r2, [pc, #276]	@ (800103c <HAL_GPIO_DeInit+0x168>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d00d      	beq.n	8000f48 <HAL_GPIO_DeInit+0x74>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a44      	ldr	r2, [pc, #272]	@ (8001040 <HAL_GPIO_DeInit+0x16c>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_DeInit+0x70>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a43      	ldr	r2, [pc, #268]	@ (8001044 <HAL_GPIO_DeInit+0x170>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <HAL_GPIO_DeInit+0x6c>
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e006      	b.n	8000f4e <HAL_GPIO_DeInit+0x7a>
 8000f40:	2304      	movs	r3, #4
 8000f42:	e004      	b.n	8000f4e <HAL_GPIO_DeInit+0x7a>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e002      	b.n	8000f4e <HAL_GPIO_DeInit+0x7a>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <HAL_GPIO_DeInit+0x7a>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	f002 0203 	and.w	r2, r2, #3
 8000f54:	0092      	lsls	r2, r2, #2
 8000f56:	4093      	lsls	r3, r2
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d132      	bne.n	8000fc4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001048 <HAL_GPIO_DeInit+0x174>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4938      	ldr	r1, [pc, #224]	@ (8001048 <HAL_GPIO_DeInit+0x174>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000f6c:	4b36      	ldr	r3, [pc, #216]	@ (8001048 <HAL_GPIO_DeInit+0x174>)
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	4934      	ldr	r1, [pc, #208]	@ (8001048 <HAL_GPIO_DeInit+0x174>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000f7a:	4b33      	ldr	r3, [pc, #204]	@ (8001048 <HAL_GPIO_DeInit+0x174>)
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	4931      	ldr	r1, [pc, #196]	@ (8001048 <HAL_GPIO_DeInit+0x174>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000f88:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <HAL_GPIO_DeInit+0x174>)
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	492d      	ldr	r1, [pc, #180]	@ (8001048 <HAL_GPIO_DeInit+0x174>)
 8000f92:	4013      	ands	r3, r2
 8000f94:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8000fa6:	4a23      	ldr	r2, [pc, #140]	@ (8001034 <HAL_GPIO_DeInit+0x160>)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	43da      	mvns	r2, r3
 8000fb6:	481f      	ldr	r0, [pc, #124]	@ (8001034 <HAL_GPIO_DeInit+0x160>)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2bff      	cmp	r3, #255	@ 0xff
 8000fc8:	d801      	bhi.n	8000fce <HAL_GPIO_DeInit+0xfa>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	e001      	b.n	8000fd2 <HAL_GPIO_DeInit+0xfe>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	2bff      	cmp	r3, #255	@ 0xff
 8000fd8:	d802      	bhi.n	8000fe0 <HAL_GPIO_DeInit+0x10c>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	e002      	b.n	8000fe6 <HAL_GPIO_DeInit+0x112>
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	3b08      	subs	r3, #8
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	210f      	movs	r1, #15
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	431a      	orrs	r2, r3
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	43db      	mvns	r3, r3
 800100e:	401a      	ands	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	3301      	adds	r3, #1
 8001018:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	fa22 f303 	lsr.w	r3, r2, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	f47f af5e 	bne.w	8000ee4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3724      	adds	r7, #36	@ 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40010000 	.word	0x40010000
 8001038:	40010800 	.word	0x40010800
 800103c:	40010c00 	.word	0x40010c00
 8001040:	40011000 	.word	0x40011000
 8001044:	40011400 	.word	0x40011400
 8001048:	40010400 	.word	0x40010400

0800104c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001068:	e003      	b.n	8001072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	041a      	lsls	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	611a      	str	r2, [r3, #16]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e272      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8087 	beq.w	80011aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800109c:	4b92      	ldr	r3, [pc, #584]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d00c      	beq.n	80010c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010a8:	4b8f      	ldr	r3, [pc, #572]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d112      	bne.n	80010da <HAL_RCC_OscConfig+0x5e>
 80010b4:	4b8c      	ldr	r3, [pc, #560]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010c0:	d10b      	bne.n	80010da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c2:	4b89      	ldr	r3, [pc, #548]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d06c      	beq.n	80011a8 <HAL_RCC_OscConfig+0x12c>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d168      	bne.n	80011a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e24c      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e2:	d106      	bne.n	80010f2 <HAL_RCC_OscConfig+0x76>
 80010e4:	4b80      	ldr	r3, [pc, #512]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a7f      	ldr	r2, [pc, #508]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e02e      	b.n	8001150 <HAL_RCC_OscConfig+0xd4>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x98>
 80010fa:	4b7b      	ldr	r3, [pc, #492]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a7a      	ldr	r2, [pc, #488]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b78      	ldr	r3, [pc, #480]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a77      	ldr	r2, [pc, #476]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800110c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e01d      	b.n	8001150 <HAL_RCC_OscConfig+0xd4>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0xbc>
 800111e:	4b72      	ldr	r3, [pc, #456]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a71      	ldr	r2, [pc, #452]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b6f      	ldr	r3, [pc, #444]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a6e      	ldr	r2, [pc, #440]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0xd4>
 8001138:	4b6b      	ldr	r3, [pc, #428]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a6a      	ldr	r2, [pc, #424]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a67      	ldr	r2, [pc, #412]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800114e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fb6a 	bl	8000830 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fb66 	bl	8000830 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	@ 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e200      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	4b5d      	ldr	r3, [pc, #372]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0xe4>
 800117e:	e014      	b.n	80011aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fb56 	bl	8000830 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fb52 	bl	8000830 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	@ 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e1ec      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119a:	4b53      	ldr	r3, [pc, #332]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x10c>
 80011a6:	e000      	b.n	80011aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d063      	beq.n	800127e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011b6:	4b4c      	ldr	r3, [pc, #304]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00b      	beq.n	80011da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011c2:	4b49      	ldr	r3, [pc, #292]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d11c      	bne.n	8001208 <HAL_RCC_OscConfig+0x18c>
 80011ce:	4b46      	ldr	r3, [pc, #280]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d116      	bne.n	8001208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	4b43      	ldr	r3, [pc, #268]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <HAL_RCC_OscConfig+0x176>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d001      	beq.n	80011f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e1c0      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f2:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4939      	ldr	r1, [pc, #228]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	e03a      	b.n	800127e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d020      	beq.n	8001252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001210:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <HAL_RCC_OscConfig+0x270>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001216:	f7ff fb0b 	bl	8000830 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff fb07 	bl	8000830 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1a1      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	4b2d      	ldr	r3, [pc, #180]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123c:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4927      	ldr	r1, [pc, #156]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800124c:	4313      	orrs	r3, r2
 800124e:	600b      	str	r3, [r1, #0]
 8001250:	e015      	b.n	800127e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <HAL_RCC_OscConfig+0x270>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff faea 	bl	8000830 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff fae6 	bl	8000830 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e180      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d03a      	beq.n	8001300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d019      	beq.n	80012c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001292:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001298:	f7ff faca 	bl	8000830 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fac6 	bl	8000830 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e160      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012be:	2001      	movs	r0, #1
 80012c0:	f000 fafe 	bl	80018c0 <RCC_Delay>
 80012c4:	e01c      	b.n	8001300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_RCC_OscConfig+0x274>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012cc:	f7ff fab0 	bl	8000830 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d2:	e00f      	b.n	80012f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff faac 	bl	8000830 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d908      	bls.n	80012f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e146      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	42420000 	.word	0x42420000
 80012f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	4b92      	ldr	r3, [pc, #584]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1e9      	bne.n	80012d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80a6 	beq.w	800145a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001312:	4b8b      	ldr	r3, [pc, #556]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10d      	bne.n	800133a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b88      	ldr	r3, [pc, #544]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a87      	ldr	r2, [pc, #540]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b85      	ldr	r3, [pc, #532]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001336:	2301      	movs	r3, #1
 8001338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133a:	4b82      	ldr	r3, [pc, #520]	@ (8001544 <HAL_RCC_OscConfig+0x4c8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d118      	bne.n	8001378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001346:	4b7f      	ldr	r3, [pc, #508]	@ (8001544 <HAL_RCC_OscConfig+0x4c8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a7e      	ldr	r2, [pc, #504]	@ (8001544 <HAL_RCC_OscConfig+0x4c8>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001352:	f7ff fa6d 	bl	8000830 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135a:	f7ff fa69 	bl	8000830 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b64      	cmp	r3, #100	@ 0x64
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e103      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136c:	4b75      	ldr	r3, [pc, #468]	@ (8001544 <HAL_RCC_OscConfig+0x4c8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x312>
 8001380:	4b6f      	ldr	r3, [pc, #444]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4a6e      	ldr	r2, [pc, #440]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6213      	str	r3, [r2, #32]
 800138c:	e02d      	b.n	80013ea <HAL_RCC_OscConfig+0x36e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x334>
 8001396:	4b6a      	ldr	r3, [pc, #424]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	4a69      	ldr	r2, [pc, #420]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	6213      	str	r3, [r2, #32]
 80013a2:	4b67      	ldr	r3, [pc, #412]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a66      	ldr	r2, [pc, #408]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	6213      	str	r3, [r2, #32]
 80013ae:	e01c      	b.n	80013ea <HAL_RCC_OscConfig+0x36e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d10c      	bne.n	80013d2 <HAL_RCC_OscConfig+0x356>
 80013b8:	4b61      	ldr	r3, [pc, #388]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4a60      	ldr	r2, [pc, #384]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	6213      	str	r3, [r2, #32]
 80013c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4a5d      	ldr	r2, [pc, #372]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6213      	str	r3, [r2, #32]
 80013d0:	e00b      	b.n	80013ea <HAL_RCC_OscConfig+0x36e>
 80013d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	6213      	str	r3, [r2, #32]
 80013de:	4b58      	ldr	r3, [pc, #352]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4a57      	ldr	r2, [pc, #348]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	f023 0304 	bic.w	r3, r3, #4
 80013e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d015      	beq.n	800141e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fa1d 	bl	8000830 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff fa19 	bl	8000830 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001408:	4293      	cmp	r3, r2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e0b1      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001410:	4b4b      	ldr	r3, [pc, #300]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0ee      	beq.n	80013fa <HAL_RCC_OscConfig+0x37e>
 800141c:	e014      	b.n	8001448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff fa07 	bl	8000830 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001424:	e00a      	b.n	800143c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7ff fa03 	bl	8000830 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001434:	4293      	cmp	r3, r2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e09b      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800143c:	4b40      	ldr	r3, [pc, #256]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1ee      	bne.n	8001426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d105      	bne.n	800145a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144e:	4b3c      	ldr	r3, [pc, #240]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a3b      	ldr	r2, [pc, #236]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8087 	beq.w	8001572 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001464:	4b36      	ldr	r3, [pc, #216]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b08      	cmp	r3, #8
 800146e:	d061      	beq.n	8001534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d146      	bne.n	8001506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001478:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <HAL_RCC_OscConfig+0x4cc>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff f9d7 	bl	8000830 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff f9d3 	bl	8000830 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e06d      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001498:	4b29      	ldr	r3, [pc, #164]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ac:	d108      	bne.n	80014c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ae:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	4921      	ldr	r1, [pc, #132]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a19      	ldr	r1, [r3, #32]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d0:	430b      	orrs	r3, r1
 80014d2:	491b      	ldr	r1, [pc, #108]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff f9a7 	bl	8000830 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e6:	f7ff f9a3 	bl	8000830 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e03d      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x46a>
 8001504:	e035      	b.n	8001572 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <HAL_RCC_OscConfig+0x4cc>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff f990 	bl	8000830 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001514:	f7ff f98c 	bl	8000830 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e026      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x498>
 8001532:	e01e      	b.n	8001572 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d107      	bne.n	800154c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e019      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
 8001540:	40021000 	.word	0x40021000
 8001544:	40007000 	.word	0x40007000
 8001548:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_RCC_OscConfig+0x500>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	429a      	cmp	r2, r3
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0d0      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001594:	4b6a      	ldr	r3, [pc, #424]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d910      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b67      	ldr	r3, [pc, #412]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 0207 	bic.w	r2, r3, #7
 80015aa:	4965      	ldr	r1, [pc, #404]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b63      	ldr	r3, [pc, #396]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0b8      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015dc:	4b59      	ldr	r3, [pc, #356]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a58      	ldr	r2, [pc, #352]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f4:	4b53      	ldr	r3, [pc, #332]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a52      	ldr	r2, [pc, #328]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80015fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001600:	4b50      	ldr	r3, [pc, #320]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	494d      	ldr	r1, [pc, #308]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d040      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d115      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e07f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	4b41      	ldr	r3, [pc, #260]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e073      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164e:	4b3d      	ldr	r3, [pc, #244]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e06b      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800165e:	4b39      	ldr	r3, [pc, #228]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f023 0203 	bic.w	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4936      	ldr	r1, [pc, #216]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001670:	f7ff f8de 	bl	8000830 <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	e00a      	b.n	800168e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001678:	f7ff f8da 	bl	8000830 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e053      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 020c 	and.w	r2, r3, #12
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	429a      	cmp	r2, r3
 800169e:	d1eb      	bne.n	8001678 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a0:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d210      	bcs.n	80016d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b24      	ldr	r3, [pc, #144]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 0207 	bic.w	r2, r3, #7
 80016b6:	4922      	ldr	r1, [pc, #136]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e032      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4916      	ldr	r1, [pc, #88]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	490e      	ldr	r1, [pc, #56]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800170e:	f000 f821 	bl	8001754 <HAL_RCC_GetSysClockFreq>
 8001712:	4602      	mov	r2, r0
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	490a      	ldr	r1, [pc, #40]	@ (8001748 <HAL_RCC_ClockConfig+0x1c8>)
 8001720:	5ccb      	ldrb	r3, [r1, r3]
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	4a09      	ldr	r2, [pc, #36]	@ (800174c <HAL_RCC_ClockConfig+0x1cc>)
 8001728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_RCC_ClockConfig+0x1d0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fe52 	bl	80003d8 <HAL_InitTick>

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40022000 	.word	0x40022000
 8001744:	40021000 	.word	0x40021000
 8001748:	08003fa4 	.word	0x08003fa4
 800174c:	20000000 	.word	0x20000000
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800176e:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b04      	cmp	r3, #4
 800177c:	d002      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x30>
 800177e:	2b08      	cmp	r3, #8
 8001780:	d003      	beq.n	800178a <HAL_RCC_GetSysClockFreq+0x36>
 8001782:	e027      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001786:	613b      	str	r3, [r7, #16]
      break;
 8001788:	e027      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	0c9b      	lsrs	r3, r3, #18
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	4a17      	ldr	r2, [pc, #92]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001794:	5cd3      	ldrb	r3, [r2, r3]
 8001796:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d010      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017a2:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	0c5b      	lsrs	r3, r3, #17
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	4a11      	ldr	r2, [pc, #68]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a0d      	ldr	r2, [pc, #52]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x98>)
 80017b6:	fb03 f202 	mul.w	r2, r3, r2
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e004      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a0c      	ldr	r2, [pc, #48]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	613b      	str	r3, [r7, #16]
      break;
 80017d2:	e002      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x98>)
 80017d6:	613b      	str	r3, [r7, #16]
      break;
 80017d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017da:	693b      	ldr	r3, [r7, #16]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	371c      	adds	r7, #28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	007a1200 	.word	0x007a1200
 80017f0:	08003fbc 	.word	0x08003fbc
 80017f4:	08003fcc 	.word	0x08003fcc
 80017f8:	003d0900 	.word	0x003d0900

080017fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001800:	4b02      	ldr	r3, [pc, #8]	@ (800180c <HAL_RCC_GetHCLKFreq+0x10>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000000 	.word	0x20000000

08001810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001814:	f7ff fff2 	bl	80017fc <HAL_RCC_GetHCLKFreq>
 8001818:	4602      	mov	r2, r0
 800181a:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	4903      	ldr	r1, [pc, #12]	@ (8001834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001826:	5ccb      	ldrb	r3, [r1, r3]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	08003fb4 	.word	0x08003fb4

08001838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800183c:	f7ff ffde 	bl	80017fc <HAL_RCC_GetHCLKFreq>
 8001840:	4602      	mov	r2, r0
 8001842:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	0adb      	lsrs	r3, r3, #11
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	4903      	ldr	r1, [pc, #12]	@ (800185c <HAL_RCC_GetPCLK2Freq+0x24>)
 800184e:	5ccb      	ldrb	r3, [r1, r3]
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001854:	4618      	mov	r0, r3
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	08003fb4 	.word	0x08003fb4

08001860 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	220f      	movs	r2, #15
 800186e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_RCC_GetClockConfig+0x58>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800187c:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <HAL_RCC_GetClockConfig+0x58>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <HAL_RCC_GetClockConfig+0x58>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <HAL_RCC_GetClockConfig+0x58>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	08db      	lsrs	r3, r3, #3
 800189a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_RCC_GetClockConfig+0x5c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0207 	and.w	r2, r3, #7
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40022000 	.word	0x40022000

080018c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <RCC_Delay+0x34>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	@ (80018f8 <RCC_Delay+0x38>)
 80018ce:	fba2 2303 	umull	r2, r3, r2, r3
 80018d2:	0a5b      	lsrs	r3, r3, #9
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018dc:	bf00      	nop
  }
  while (Delay --);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1e5a      	subs	r2, r3, #1
 80018e2:	60fa      	str	r2, [r7, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f9      	bne.n	80018dc <RCC_Delay+0x1c>
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000000 	.word	0x20000000
 80018f8:	10624dd3 	.word	0x10624dd3

080018fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e041      	b.n	8001992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d106      	bne.n	8001928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7fe fe72 	bl	800060c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3304      	adds	r3, #4
 8001938:	4619      	mov	r1, r3
 800193a:	4610      	mov	r0, r2
 800193c:	f000 fa8a 	bl	8001e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d001      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e03a      	b.n	8001a2a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a18      	ldr	r2, [pc, #96]	@ (8001a34 <HAL_TIM_Base_Start_IT+0x98>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00e      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x58>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019de:	d009      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x58>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <HAL_TIM_Base_Start_IT+0x9c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d004      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x58>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a13      	ldr	r2, [pc, #76]	@ (8001a3c <HAL_TIM_Base_Start_IT+0xa0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d111      	bne.n	8001a18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d010      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a16:	e007      	b.n	8001a28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40012c00 	.word	0x40012c00
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40000800 	.word	0x40000800

08001a40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0201 	bic.w	r2, r2, #1
 8001a56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6a1a      	ldr	r2, [r3, #32]
 8001a5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10f      	bne.n	8001a88 <HAL_TIM_Base_Stop_IT+0x48>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a1a      	ldr	r2, [r3, #32]
 8001a6e:	f240 4344 	movw	r3, #1092	@ 0x444
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <HAL_TIM_Base_Stop_IT+0x48>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d020      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01b      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0202 	mvn.w	r2, #2
 8001ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f998 	bl	8001e1c <HAL_TIM_IC_CaptureCallback>
 8001aec:	e005      	b.n	8001afa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f98b 	bl	8001e0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f99a 	bl	8001e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d020      	beq.n	8001b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d01b      	beq.n	8001b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0204 	mvn.w	r2, #4
 8001b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2202      	movs	r2, #2
 8001b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f972 	bl	8001e1c <HAL_TIM_IC_CaptureCallback>
 8001b38:	e005      	b.n	8001b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f965 	bl	8001e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f974 	bl	8001e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d020      	beq.n	8001b98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01b      	beq.n	8001b98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f06f 0208 	mvn.w	r2, #8
 8001b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f94c 	bl	8001e1c <HAL_TIM_IC_CaptureCallback>
 8001b84:	e005      	b.n	8001b92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f93f 	bl	8001e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f94e 	bl	8001e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d01b      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0210 	mvn.w	r2, #16
 8001bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2208      	movs	r2, #8
 8001bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f926 	bl	8001e1c <HAL_TIM_IC_CaptureCallback>
 8001bd0:	e005      	b.n	8001bde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f919 	bl	8001e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f928 	bl	8001e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00c      	beq.n	8001c08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0201 	mvn.w	r2, #1
 8001c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7fe fb94 	bl	8000330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00c      	beq.n	8001c2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fa7f 	bl	800212a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00c      	beq.n	8001c50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8f8 	bl	8001e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0220 	mvn.w	r2, #32
 8001c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fa52 	bl	8002118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_TIM_ConfigClockSource+0x1c>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e0b4      	b.n	8001e02 <HAL_TIM_ConfigClockSource+0x186>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001cbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cd0:	d03e      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0xd4>
 8001cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cd6:	f200 8087 	bhi.w	8001de8 <HAL_TIM_ConfigClockSource+0x16c>
 8001cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cde:	f000 8086 	beq.w	8001dee <HAL_TIM_ConfigClockSource+0x172>
 8001ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ce6:	d87f      	bhi.n	8001de8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ce8:	2b70      	cmp	r3, #112	@ 0x70
 8001cea:	d01a      	beq.n	8001d22 <HAL_TIM_ConfigClockSource+0xa6>
 8001cec:	2b70      	cmp	r3, #112	@ 0x70
 8001cee:	d87b      	bhi.n	8001de8 <HAL_TIM_ConfigClockSource+0x16c>
 8001cf0:	2b60      	cmp	r3, #96	@ 0x60
 8001cf2:	d050      	beq.n	8001d96 <HAL_TIM_ConfigClockSource+0x11a>
 8001cf4:	2b60      	cmp	r3, #96	@ 0x60
 8001cf6:	d877      	bhi.n	8001de8 <HAL_TIM_ConfigClockSource+0x16c>
 8001cf8:	2b50      	cmp	r3, #80	@ 0x50
 8001cfa:	d03c      	beq.n	8001d76 <HAL_TIM_ConfigClockSource+0xfa>
 8001cfc:	2b50      	cmp	r3, #80	@ 0x50
 8001cfe:	d873      	bhi.n	8001de8 <HAL_TIM_ConfigClockSource+0x16c>
 8001d00:	2b40      	cmp	r3, #64	@ 0x40
 8001d02:	d058      	beq.n	8001db6 <HAL_TIM_ConfigClockSource+0x13a>
 8001d04:	2b40      	cmp	r3, #64	@ 0x40
 8001d06:	d86f      	bhi.n	8001de8 <HAL_TIM_ConfigClockSource+0x16c>
 8001d08:	2b30      	cmp	r3, #48	@ 0x30
 8001d0a:	d064      	beq.n	8001dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8001d0c:	2b30      	cmp	r3, #48	@ 0x30
 8001d0e:	d86b      	bhi.n	8001de8 <HAL_TIM_ConfigClockSource+0x16c>
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	d060      	beq.n	8001dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d867      	bhi.n	8001de8 <HAL_TIM_ConfigClockSource+0x16c>
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d05c      	beq.n	8001dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	d05a      	beq.n	8001dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8001d20:	e062      	b.n	8001de8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d32:	f000 f974 	bl	800201e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001d44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	609a      	str	r2, [r3, #8]
      break;
 8001d4e:	e04f      	b.n	8001df0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d60:	f000 f95d 	bl	800201e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d72:	609a      	str	r2, [r3, #8]
      break;
 8001d74:	e03c      	b.n	8001df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d82:	461a      	mov	r2, r3
 8001d84:	f000 f8d4 	bl	8001f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2150      	movs	r1, #80	@ 0x50
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f92b 	bl	8001fea <TIM_ITRx_SetConfig>
      break;
 8001d94:	e02c      	b.n	8001df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001da2:	461a      	mov	r2, r3
 8001da4:	f000 f8f2 	bl	8001f8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2160      	movs	r1, #96	@ 0x60
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f91b 	bl	8001fea <TIM_ITRx_SetConfig>
      break;
 8001db4:	e01c      	b.n	8001df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f000 f8b4 	bl	8001f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2140      	movs	r1, #64	@ 0x40
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f90b 	bl	8001fea <TIM_ITRx_SetConfig>
      break;
 8001dd4:	e00c      	b.n	8001df0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f000 f902 	bl	8001fea <TIM_ITRx_SetConfig>
      break;
 8001de6:	e003      	b.n	8001df0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
      break;
 8001dec:	e000      	b.n	8001df0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001dee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
	...

08001e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a2f      	ldr	r2, [pc, #188]	@ (8001f24 <TIM_Base_SetConfig+0xd0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00b      	beq.n	8001e84 <TIM_Base_SetConfig+0x30>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e72:	d007      	beq.n	8001e84 <TIM_Base_SetConfig+0x30>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a2c      	ldr	r2, [pc, #176]	@ (8001f28 <TIM_Base_SetConfig+0xd4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d003      	beq.n	8001e84 <TIM_Base_SetConfig+0x30>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001f2c <TIM_Base_SetConfig+0xd8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d108      	bne.n	8001e96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a22      	ldr	r2, [pc, #136]	@ (8001f24 <TIM_Base_SetConfig+0xd0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00b      	beq.n	8001eb6 <TIM_Base_SetConfig+0x62>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea4:	d007      	beq.n	8001eb6 <TIM_Base_SetConfig+0x62>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f28 <TIM_Base_SetConfig+0xd4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d003      	beq.n	8001eb6 <TIM_Base_SetConfig+0x62>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f2c <TIM_Base_SetConfig+0xd8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d108      	bne.n	8001ec8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <TIM_Base_SetConfig+0xd0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d103      	bne.n	8001efc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f023 0201 	bic.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	40012c00 	.word	0x40012c00
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40000800 	.word	0x40000800

08001f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	f023 0201 	bic.w	r2, r3, #1
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f023 030a 	bic.w	r3, r3, #10
 8001f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	621a      	str	r2, [r3, #32]
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	f023 0210 	bic.w	r2, r3, #16
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	031b      	lsls	r3, r3, #12
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	621a      	str	r2, [r3, #32]
}
 8001fe0:	bf00      	nop
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b085      	sub	sp, #20
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	f043 0307 	orr.w	r3, r3, #7
 800200c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	609a      	str	r2, [r3, #8]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800201e:	b480      	push	{r7}
 8002020:	b087      	sub	sp, #28
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002038:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	021a      	lsls	r2, r3, #8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	431a      	orrs	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4313      	orrs	r3, r2
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	609a      	str	r2, [r3, #8]
}
 8002052:	bf00      	nop
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002070:	2302      	movs	r3, #2
 8002072:	e046      	b.n	8002102 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800209a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a16      	ldr	r2, [pc, #88]	@ (800210c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00e      	beq.n	80020d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c0:	d009      	beq.n	80020d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d004      	beq.n	80020d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a10      	ldr	r2, [pc, #64]	@ (8002114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10c      	bne.n	80020f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	40012c00 	.word	0x40012c00
 8002110:	40000400 	.word	0x40000400
 8002114:	40000800 	.word	0x40000800

08002118 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e042      	b.n	80021d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe faa0 	bl	80006a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	@ 0x24
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800217e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 fde1 	bl	8002d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e024      	b.n	8002238 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2224      	movs	r2, #36	@ 0x24
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002204:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe faa2 	bl	8000750 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	@ 0x28
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b20      	cmp	r3, #32
 800225e:	d175      	bne.n	800234c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_UART_Transmit+0x2c>
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e06e      	b.n	800234e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2221      	movs	r2, #33	@ 0x21
 800227a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800227e:	f7fe fad7 	bl	8000830 <HAL_GetTick>
 8002282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	88fa      	ldrh	r2, [r7, #6]
 8002288:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	88fa      	ldrh	r2, [r7, #6]
 800228e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002298:	d108      	bne.n	80022ac <HAL_UART_Transmit+0x6c>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d104      	bne.n	80022ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	e003      	b.n	80022b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022b4:	e02e      	b.n	8002314 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2200      	movs	r2, #0
 80022be:	2180      	movs	r1, #128	@ 0x80
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 fb13 	bl	80028ec <UART_WaitOnFlagUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e03a      	b.n	800234e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10b      	bne.n	80022f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	3302      	adds	r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	e007      	b.n	8002306 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3301      	adds	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1cb      	bne.n	80022b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2200      	movs	r2, #0
 8002326:	2140      	movs	r1, #64	@ 0x40
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fadf 	bl	80028ec <UART_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e006      	b.n	800234e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
  }
}
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	4613      	mov	r3, r2
 8002362:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b20      	cmp	r3, #32
 800236e:	d112      	bne.n	8002396 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HAL_UART_Receive_IT+0x26>
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e00b      	b.n	8002398 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	461a      	mov	r2, r3
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fb06 	bl	800299e <UART_Start_Receive_IT>
 8002392:	4603      	mov	r3, r0
 8002394:	e000      	b.n	8002398 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002396:	2302      	movs	r3, #2
  }
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b0ba      	sub	sp, #232	@ 0xe8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80023de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_UART_IRQHandler+0x66>
 80023f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fbe3 	bl	8002bca <UART_Receive_IT>
      return;
 8002404:	e25b      	b.n	80028be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80de 	beq.w	80025cc <HAL_UART_IRQHandler+0x22c>
 8002410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800241c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002420:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80d1 	beq.w	80025cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800242a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <HAL_UART_IRQHandler+0xae>
 8002436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800243a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800244e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_UART_IRQHandler+0xd2>
 800245a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	f043 0202 	orr.w	r2, r3, #2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_UART_IRQHandler+0xf6>
 800247e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	f043 0204 	orr.w	r2, r3, #4
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d011      	beq.n	80024c6 <HAL_UART_IRQHandler+0x126>
 80024a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	f043 0208 	orr.w	r2, r3, #8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 81f2 	beq.w	80028b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_UART_IRQHandler+0x14e>
 80024dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fb6e 	bl	8002bca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf14      	ite	ne
 80024fc:	2301      	movne	r3, #1
 80024fe:	2300      	moveq	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <HAL_UART_IRQHandler+0x17a>
 8002512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d04f      	beq.n	80025ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fa78 	bl	8002a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d041      	beq.n	80025b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	3314      	adds	r3, #20
 8002534:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002538:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800253c:	e853 3f00 	ldrex	r3, [r3]
 8002540:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002544:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800254c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	3314      	adds	r3, #20
 8002556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800255a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800255e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800256a:	e841 2300 	strex	r3, r2, [r1]
 800256e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1d9      	bne.n	800252e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d013      	beq.n	80025aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002586:	4a7e      	ldr	r2, [pc, #504]	@ (8002780 <HAL_UART_IRQHandler+0x3e0>)
 8002588:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe faa4 	bl	8000adc <HAL_DMA_Abort_IT>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025a4:	4610      	mov	r0, r2
 80025a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a8:	e00e      	b.n	80025c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fd fe84 	bl	80002b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b0:	e00a      	b.n	80025c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fd fe80 	bl	80002b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	e006      	b.n	80025c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fd fe7c 	bl	80002b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80025c6:	e175      	b.n	80028b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c8:	bf00      	nop
    return;
 80025ca:	e173      	b.n	80028b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	f040 814f 	bne.w	8002874 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8148 	beq.w	8002874 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8141 	beq.w	8002874 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80b6 	beq.w	8002784 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8145 	beq.w	80028b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002636:	429a      	cmp	r2, r3
 8002638:	f080 813e 	bcs.w	80028b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002642:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b20      	cmp	r3, #32
 800264c:	f000 8088 	beq.w	8002760 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	330c      	adds	r3, #12
 8002656:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800265e:	e853 3f00 	ldrex	r3, [r3]
 8002662:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002666:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800266a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800266e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	330c      	adds	r3, #12
 8002678:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800267c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002680:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002684:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002688:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800268c:	e841 2300 	strex	r3, r2, [r1]
 8002690:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1d9      	bne.n	8002650 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3314      	adds	r3, #20
 80026a2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026a6:	e853 3f00 	ldrex	r3, [r3]
 80026aa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80026ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3314      	adds	r3, #20
 80026bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026c0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80026c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80026c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80026cc:	e841 2300 	strex	r3, r2, [r1]
 80026d0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80026d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e1      	bne.n	800269c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3314      	adds	r3, #20
 80026de:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026e2:	e853 3f00 	ldrex	r3, [r3]
 80026e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80026e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3314      	adds	r3, #20
 80026f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80026fc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002700:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002702:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002704:	e841 2300 	strex	r3, r2, [r1]
 8002708:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800270a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e3      	bne.n	80026d8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	330c      	adds	r3, #12
 8002724:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002728:	e853 3f00 	ldrex	r3, [r3]
 800272c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800272e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002730:	f023 0310 	bic.w	r3, r3, #16
 8002734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	330c      	adds	r3, #12
 800273e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002742:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002744:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002746:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002748:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e3      	bne.n	800271e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe f983 	bl	8000a66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800276e:	b29b      	uxth	r3, r3
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	b29b      	uxth	r3, r3
 8002774:	4619      	mov	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8ad 	bl	80028d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800277c:	e09c      	b.n	80028b8 <HAL_UART_IRQHandler+0x518>
 800277e:	bf00      	nop
 8002780:	08002ad5 	.word	0x08002ad5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800278c:	b29b      	uxth	r3, r3
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 808e 	beq.w	80028bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8089 	beq.w	80028bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	330c      	adds	r3, #12
 80027b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b4:	e853 3f00 	ldrex	r3, [r3]
 80027b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80027ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80027ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80027d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80027d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027d6:	e841 2300 	strex	r3, r2, [r1]
 80027da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80027dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1e3      	bne.n	80027aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3314      	adds	r3, #20
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	e853 3f00 	ldrex	r3, [r3]
 80027f0:	623b      	str	r3, [r7, #32]
   return(result);
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3314      	adds	r3, #20
 8002802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002806:	633a      	str	r2, [r7, #48]	@ 0x30
 8002808:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800280c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800280e:	e841 2300 	strex	r3, r2, [r1]
 8002812:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1e3      	bne.n	80027e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	e853 3f00 	ldrex	r3, [r3]
 8002836:	60fb      	str	r3, [r7, #12]
   return(result);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0310 	bic.w	r3, r3, #16
 800283e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	330c      	adds	r3, #12
 8002848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800284c:	61fa      	str	r2, [r7, #28]
 800284e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002850:	69b9      	ldr	r1, [r7, #24]
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	e841 2300 	strex	r3, r2, [r1]
 8002858:	617b      	str	r3, [r7, #20]
   return(result);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e3      	bne.n	8002828 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800286a:	4619      	mov	r1, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f832 	bl	80028d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002872:	e023      	b.n	80028bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <HAL_UART_IRQHandler+0x4f4>
 8002880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f935 	bl	8002afc <UART_Transmit_IT>
    return;
 8002892:	e014      	b.n	80028be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <HAL_UART_IRQHandler+0x51e>
 80028a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f974 	bl	8002b9a <UART_EndTransmit_IT>
    return;
 80028b2:	e004      	b.n	80028be <HAL_UART_IRQHandler+0x51e>
    return;
 80028b4:	bf00      	nop
 80028b6:	e002      	b.n	80028be <HAL_UART_IRQHandler+0x51e>
      return;
 80028b8:	bf00      	nop
 80028ba:	e000      	b.n	80028be <HAL_UART_IRQHandler+0x51e>
      return;
 80028bc:	bf00      	nop
  }
}
 80028be:	37e8      	adds	r7, #232	@ 0xe8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fc:	e03b      	b.n	8002976 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d037      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7fd ff93 	bl	8000830 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <UART_WaitOnFlagUntilTimeout+0x30>
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e03a      	b.n	8002996 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d023      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x8a>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b80      	cmp	r3, #128	@ 0x80
 8002932:	d020      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b40      	cmp	r3, #64	@ 0x40
 8002938:	d01d      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b08      	cmp	r3, #8
 8002946:	d116      	bne.n	8002976 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f856 	bl	8002a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2208      	movs	r2, #8
 8002968:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e00f      	b.n	8002996 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	429a      	cmp	r2, r3
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	429a      	cmp	r2, r3
 8002992:	d0b4      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	4613      	mov	r3, r2
 80029aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	88fa      	ldrh	r2, [r7, #6]
 80029bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2222      	movs	r2, #34	@ 0x22
 80029c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0220 	orr.w	r2, r2, #32
 8002a02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b095      	sub	sp, #84	@ 0x54
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330c      	adds	r3, #12
 8002a36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a38:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e5      	bne.n	8002a18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3314      	adds	r3, #20
 8002a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3314      	adds	r3, #20
 8002a6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a74:	e841 2300 	strex	r3, r2, [r1]
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e5      	bne.n	8002a4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d119      	bne.n	8002abc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	e853 3f00 	ldrex	r3, [r3]
 8002a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f023 0310 	bic.w	r3, r3, #16
 8002a9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002aa8:	61ba      	str	r2, [r7, #24]
 8002aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aac:	6979      	ldr	r1, [r7, #20]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	e841 2300 	strex	r3, r2, [r1]
 8002ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e5      	bne.n	8002a88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002aca:	bf00      	nop
 8002acc:	3754      	adds	r7, #84	@ 0x54
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f7fd fbe2 	bl	80002b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b21      	cmp	r3, #33	@ 0x21
 8002b0e:	d13e      	bne.n	8002b8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b18:	d114      	bne.n	8002b44 <UART_Transmit_IT+0x48>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d110      	bne.n	8002b44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	1c9a      	adds	r2, r3, #2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	621a      	str	r2, [r3, #32]
 8002b42:	e008      	b.n	8002b56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	1c59      	adds	r1, r3, #1
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6211      	str	r1, [r2, #32]
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4619      	mov	r1, r3
 8002b64:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff fe82 	bl	80028c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b08c      	sub	sp, #48	@ 0x30
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b22      	cmp	r3, #34	@ 0x22
 8002bdc:	f040 80ae 	bne.w	8002d3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002be8:	d117      	bne.n	8002c1a <UART_Receive_IT+0x50>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d113      	bne.n	8002c1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c12:	1c9a      	adds	r2, r3, #2
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c18:	e026      	b.n	8002c68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c2c:	d007      	beq.n	8002c3e <UART_Receive_IT+0x74>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <UART_Receive_IT+0x82>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e008      	b.n	8002c5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4619      	mov	r1, r3
 8002c76:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d15d      	bne.n	8002d38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0220 	bic.w	r2, r2, #32
 8002c8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d135      	bne.n	8002d2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f023 0310 	bic.w	r3, r3, #16
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce8:	623a      	str	r2, [r7, #32]
 8002cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	69f9      	ldr	r1, [r7, #28]
 8002cee:	6a3a      	ldr	r2, [r7, #32]
 8002cf0:	e841 2300 	strex	r3, r2, [r1]
 8002cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e5      	bne.n	8002cc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d10a      	bne.n	8002d20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff fdd5 	bl	80028d6 <HAL_UARTEx_RxEventCallback>
 8002d2c:	e002      	b.n	8002d34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fd faa6 	bl	8000280 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e002      	b.n	8002d3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3730      	adds	r7, #48	@ 0x30
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002d82:	f023 030c 	bic.w	r3, r3, #12
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2c      	ldr	r2, [pc, #176]	@ (8002e5c <UART_SetConfig+0x114>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d103      	bne.n	8002db8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002db0:	f7fe fd42 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	e002      	b.n	8002dbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002db8:	f7fe fd2a 	bl	8001810 <HAL_RCC_GetPCLK1Freq>
 8002dbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009a      	lsls	r2, r3, #2
 8002dc8:	441a      	add	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	4a22      	ldr	r2, [pc, #136]	@ (8002e60 <UART_SetConfig+0x118>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	0119      	lsls	r1, r3, #4
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009a      	lsls	r2, r3, #2
 8002de8:	441a      	add	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002df4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e60 <UART_SetConfig+0x118>)
 8002df6:	fba3 0302 	umull	r0, r3, r3, r2
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2064      	movs	r0, #100	@ 0x64
 8002dfe:	fb00 f303 	mul.w	r3, r0, r3
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	3332      	adds	r3, #50	@ 0x32
 8002e08:	4a15      	ldr	r2, [pc, #84]	@ (8002e60 <UART_SetConfig+0x118>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e14:	4419      	add	r1, r3
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009a      	lsls	r2, r3, #2
 8002e20:	441a      	add	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e60 <UART_SetConfig+0x118>)
 8002e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2064      	movs	r0, #100	@ 0x64
 8002e36:	fb00 f303 	mul.w	r3, r0, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	3332      	adds	r3, #50	@ 0x32
 8002e40:	4a07      	ldr	r2, [pc, #28]	@ (8002e60 <UART_SetConfig+0x118>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	f003 020f 	and.w	r2, r3, #15
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	440a      	add	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	51eb851f 	.word	0x51eb851f

08002e64 <modbus_port_uart_init>:

/**
 * @brief   Initialize UART for Modbus RTU
 */
void
modbus_port_uart_init(uint32_t baudrate, uint8_t parity, uint8_t stop_bits) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	70fb      	strb	r3, [r7, #3]
 8002e70:	4613      	mov	r3, r2
 8002e72:	70bb      	strb	r3, [r7, #2]
    /* Deinitialize UART */
    HAL_UART_DeInit(&huart1);
 8002e74:	4827      	ldr	r0, [pc, #156]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002e76:	f7ff f9b1 	bl	80021dc <HAL_UART_DeInit>

    /* Configure UART1 */
    huart1.Instance = USART1;
 8002e7a:	4b26      	ldr	r3, [pc, #152]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002e7c:	4a26      	ldr	r2, [pc, #152]	@ (8002f18 <modbus_port_uart_init+0xb4>)
 8002e7e:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = baudrate;
 8002e80:	4a24      	ldr	r2, [pc, #144]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6053      	str	r3, [r2, #4]
    huart1.Init.WordLength = (parity == 0) ? UART_WORDLENGTH_8B : UART_WORDLENGTH_9B;
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <modbus_port_uart_init+0x2c>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e001      	b.n	8002e94 <modbus_port_uart_init+0x30>
 8002e90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e94:	4a1f      	ldr	r2, [pc, #124]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002e96:	6093      	str	r3, [r2, #8]
    huart1.Init.StopBits = (stop_bits == 1) ? UART_STOPBITS_1 : UART_STOPBITS_2;
 8002e98:	78bb      	ldrb	r3, [r7, #2]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <modbus_port_uart_init+0x3e>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e001      	b.n	8002ea6 <modbus_port_uart_init+0x42>
 8002ea2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002ea8:	60d3      	str	r3, [r2, #12]

    if (parity == 0) {
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <modbus_port_uart_init+0x54>
        huart1.Init.Parity = UART_PARITY_NONE;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	611a      	str	r2, [r3, #16]
 8002eb6:	e00b      	b.n	8002ed0 <modbus_port_uart_init+0x6c>
    } else if (parity == 1) {
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d104      	bne.n	8002ec8 <modbus_port_uart_init+0x64>
        huart1.Init.Parity = UART_PARITY_ODD;
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002ec0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	e003      	b.n	8002ed0 <modbus_port_uart_init+0x6c>
    } else {
        huart1.Init.Parity = UART_PARITY_EVEN;
 8002ec8:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002eca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ece:	611a      	str	r2, [r3, #16]
    }

    huart1.Init.Mode = UART_MODE_TX_RX;
 8002ed0:	4b10      	ldr	r3, [pc, #64]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002edc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002ee2:	480c      	ldr	r0, [pc, #48]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002ee4:	f7ff f92a 	bl	800213c <HAL_UART_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <modbus_port_uart_init+0x8e>
        Error_Handler();
 8002eee:	f7fd fa3b 	bl	8000368 <Error_Handler>
    }

    /* QUAN TRỌNG: Khởi tạo buffer trước khi gọi Receive_IT */
    uart_rx_byte = 0;
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <modbus_port_uart_init+0xb8>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]

    /* Bắt đầu nhận UART với interrupt mode - 1 byte mỗi lần */
    if (HAL_UART_Receive_IT(&huart1, &uart_rx_byte, 1) != HAL_OK) {
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4908      	ldr	r1, [pc, #32]	@ (8002f1c <modbus_port_uart_init+0xb8>)
 8002efc:	4805      	ldr	r0, [pc, #20]	@ (8002f14 <modbus_port_uart_init+0xb0>)
 8002efe:	f7ff fa2a 	bl	8002356 <HAL_UART_Receive_IT>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <modbus_port_uart_init+0xa8>
        Error_Handler();
 8002f08:	f7fd fa2e 	bl	8000368 <Error_Handler>
    }
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200000b8 	.word	0x200000b8
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	2000014c 	.word	0x2000014c

08002f20 <modbus_port_send>:

/**
 * @brief   Send data via UART (blocking)
 */
void
modbus_port_send(const uint8_t *data, uint16_t length) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
    /* Send all bytes */
    HAL_UART_Transmit(&huart1, (uint8_t*)data, length, 100);
 8002f2c:	887a      	ldrh	r2, [r7, #2]
 8002f2e:	2364      	movs	r3, #100	@ 0x64
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4803      	ldr	r0, [pc, #12]	@ (8002f40 <modbus_port_send+0x20>)
 8002f34:	f7ff f984 	bl	8002240 <HAL_UART_Transmit>
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200000b8 	.word	0x200000b8

08002f44 <modbus_port_get_time_us>:

/**
 * @brief   Get time in microseconds (dùng SysTick)
 */
uint32_t
modbus_port_get_time_us(void) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
    uint32_t ms = HAL_GetTick();
 8002f4a:	f7fd fc71 	bl	8000830 <HAL_GetTick>
 8002f4e:	60f8      	str	r0, [r7, #12]
    uint32_t ticks = SysTick->VAL;
 8002f50:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <modbus_port_get_time_us+0x40>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60bb      	str	r3, [r7, #8]
    uint32_t reload = SysTick->LOAD;
 8002f56:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <modbus_port_get_time_us+0x40>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	607b      	str	r3, [r7, #4]

    /* SysTick đếm xuống, tính microseconds */
    return (ms * 1000) + ((reload - ticks) * 1000) / reload;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f62:	fb03 f202 	mul.w	r2, r3, r2
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1acb      	subs	r3, r1, r3
 8002f6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002f70:	fb03 f101 	mul.w	r1, r3, r1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	e000e010 	.word	0xe000e010

08002f88 <modbus_port_timer_init>:
/**
 * @brief   Initialize timer for T3.5 detection
 * @param   period_us: T3.5 period in microseconds
 */
void
modbus_port_timer_init(uint32_t period_us) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	@ 0x28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f90:	f107 0318 	add.w	r3, r7, #24
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9e:	f107 0310 	add.w	r3, r7, #16
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]

    /* Enable TIM2 clock */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fa8:	4b28      	ldr	r3, [pc, #160]	@ (800304c <modbus_port_timer_init+0xc4>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4a27      	ldr	r2, [pc, #156]	@ (800304c <modbus_port_timer_init+0xc4>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	61d3      	str	r3, [r2, #28]
 8002fb4:	4b25      	ldr	r3, [pc, #148]	@ (800304c <modbus_port_timer_init+0xc4>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]

    /* STM32F103: APB1 timer clock = 72MHz (với APB1 prescaler = 2)
     * Prescaler = 71 -> timer frequency = 72MHz / 72 = 1MHz = 1us per tick
     */
    htim_modbus.Instance = TIM2;
 8002fc0:	4b23      	ldr	r3, [pc, #140]	@ (8003050 <modbus_port_timer_init+0xc8>)
 8002fc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002fc6:	601a      	str	r2, [r3, #0]
    htim_modbus.Init.Prescaler = 71;
 8002fc8:	4b21      	ldr	r3, [pc, #132]	@ (8003050 <modbus_port_timer_init+0xc8>)
 8002fca:	2247      	movs	r2, #71	@ 0x47
 8002fcc:	605a      	str	r2, [r3, #4]
    htim_modbus.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fce:	4b20      	ldr	r3, [pc, #128]	@ (8003050 <modbus_port_timer_init+0xc8>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	609a      	str	r2, [r3, #8]
    htim_modbus.Init.Period = period_us - 1;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003050 <modbus_port_timer_init+0xc8>)
 8002fda:	60d3      	str	r3, [r2, #12]
    htim_modbus.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8003050 <modbus_port_timer_init+0xc8>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]
    htim_modbus.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <modbus_port_timer_init+0xc8>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim_modbus) != HAL_OK) {
 8002fe8:	4819      	ldr	r0, [pc, #100]	@ (8003050 <modbus_port_timer_init+0xc8>)
 8002fea:	f7fe fc87 	bl	80018fc <HAL_TIM_Base_Init>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <modbus_port_timer_init+0x70>
        Error_Handler();
 8002ff4:	f7fd f9b8 	bl	8000368 <Error_Handler>
    }

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ff8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ffc:	61bb      	str	r3, [r7, #24]
    if (HAL_TIM_ConfigClockSource(&htim_modbus, &sClockSourceConfig) != HAL_OK) {
 8002ffe:	f107 0318 	add.w	r3, r7, #24
 8003002:	4619      	mov	r1, r3
 8003004:	4812      	ldr	r0, [pc, #72]	@ (8003050 <modbus_port_timer_init+0xc8>)
 8003006:	f7fe fe39 	bl	8001c7c <HAL_TIM_ConfigClockSource>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <modbus_port_timer_init+0x8c>
        Error_Handler();
 8003010:	f7fd f9aa 	bl	8000368 <Error_Handler>
    }

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim_modbus, &sMasterConfig) != HAL_OK) {
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	4619      	mov	r1, r3
 8003022:	480b      	ldr	r0, [pc, #44]	@ (8003050 <modbus_port_timer_init+0xc8>)
 8003024:	f7ff f81a 	bl	800205c <HAL_TIMEx_MasterConfigSynchronization>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <modbus_port_timer_init+0xaa>
        Error_Handler();
 800302e:	f7fd f99b 	bl	8000368 <Error_Handler>
    }

    /* Enable TIM2 interrupt */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	2101      	movs	r1, #1
 8003036:	201c      	movs	r0, #28
 8003038:	f7fd fcdd 	bl	80009f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800303c:	201c      	movs	r0, #28
 800303e:	f7fd fcf6 	bl	8000a2e <HAL_NVIC_EnableIRQ>
}
 8003042:	bf00      	nop
 8003044:	3728      	adds	r7, #40	@ 0x28
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000
 8003050:	20000104 	.word	0x20000104

08003054 <modbus_port_timer_enable>:

/**
 * @brief   Enable/disable timer
 */
void
modbus_port_timer_enable(bool enable) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <modbus_port_timer_enable+0x20>
        __HAL_TIM_SET_COUNTER(&htim_modbus, 0);
 8003064:	4b07      	ldr	r3, [pc, #28]	@ (8003084 <modbus_port_timer_enable+0x30>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2200      	movs	r2, #0
 800306a:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_TIM_Base_Start_IT(&htim_modbus);
 800306c:	4805      	ldr	r0, [pc, #20]	@ (8003084 <modbus_port_timer_enable+0x30>)
 800306e:	f7fe fc95 	bl	800199c <HAL_TIM_Base_Start_IT>
    } else {
        HAL_TIM_Base_Stop_IT(&htim_modbus);
    }
}
 8003072:	e002      	b.n	800307a <modbus_port_timer_enable+0x26>
        HAL_TIM_Base_Stop_IT(&htim_modbus);
 8003074:	4803      	ldr	r0, [pc, #12]	@ (8003084 <modbus_port_timer_enable+0x30>)
 8003076:	f7fe fce3 	bl	8001a40 <HAL_TIM_Base_Stop_IT>
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000104 	.word	0x20000104

08003088 <modbus_port_rs485_tx_enable>:
}

/**
 * @brief   RS485 transmit enable (cho Simple API)
 */
void modbus_port_rs485_tx_enable(void) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
    /* Nếu có RS485 DE pin, uncomment dòng dưới */
    HAL_GPIO_WritePin(RS485_TXEN_GPIO_Port, RS485_TXEN_Pin, GPIO_PIN_SET);
 800308e:	2201      	movs	r2, #1
 8003090:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003094:	4808      	ldr	r0, [pc, #32]	@ (80030b8 <modbus_port_rs485_tx_enable+0x30>)
 8003096:	f7fd ffd9 	bl	800104c <HAL_GPIO_WritePin>

    /* Delay nhỏ */
    for(volatile int i = 0; i < 10; i++);
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	e002      	b.n	80030a6 <modbus_port_rs485_tx_enable+0x1e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3301      	adds	r3, #1
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	ddf9      	ble.n	80030a0 <modbus_port_rs485_tx_enable+0x18>
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40010800 	.word	0x40010800

080030bc <modbus_port_rs485_rx_enable>:

/**
 * @brief   RS485 receive enable (cho Simple API)
 */
void modbus_port_rs485_rx_enable(void) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
    /* Delay nhỏ */
    for(volatile int i = 0; i < 10; i++);
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	e002      	b.n	80030ce <modbus_port_rs485_rx_enable+0x12>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3301      	adds	r3, #1
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b09      	cmp	r3, #9
 80030d2:	ddf9      	ble.n	80030c8 <modbus_port_rs485_rx_enable+0xc>

    /* Nếu có RS485 DE pin, uncomment dòng dưới */
    HAL_GPIO_WritePin(RS485_TXEN_GPIO_Port, RS485_TXEN_Pin, GPIO_PIN_RESET);
 80030d4:	2200      	movs	r2, #0
 80030d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030da:	4803      	ldr	r0, [pc, #12]	@ (80030e8 <modbus_port_rs485_rx_enable+0x2c>)
 80030dc:	f7fd ffb6 	bl	800104c <HAL_GPIO_WritePin>
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40010800 	.word	0x40010800

080030ec <modbus_port_get_rx_byte>:

/**
 * @brief   HAL UART Receive Complete Callback - gọi từ main.c
 */
uint8_t modbus_port_get_rx_byte(void) {
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
    return uart_rx_byte;
 80030f0:	4b02      	ldr	r3, [pc, #8]	@ (80030fc <modbus_port_get_rx_byte+0x10>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	2000014c 	.word	0x2000014c

08003100 <modbus_port_uart_receive_next>:

/**
 * @brief   Start next UART receive
 */
void modbus_port_uart_receive_next(void) {
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, &uart_rx_byte, 1);
 8003104:	2201      	movs	r2, #1
 8003106:	4903      	ldr	r1, [pc, #12]	@ (8003114 <modbus_port_uart_receive_next+0x14>)
 8003108:	4803      	ldr	r0, [pc, #12]	@ (8003118 <modbus_port_uart_receive_next+0x18>)
 800310a:	f7ff f924 	bl	8002356 <HAL_UART_Receive_IT>
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	2000014c 	.word	0x2000014c
 8003118:	200000b8 	.word	0x200000b8

0800311c <modbus_is_register_valid>:
 * @param   addr: Internal register address (0-based)
 * @param   reg_type: Register type (0=coil, 1=DI, 3=IR, 4=HR)
 * @return  true if register is valid, false otherwise
 */
bool
modbus_is_register_valid(uint16_t addr, uint8_t reg_type) {
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	@ 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	460a      	mov	r2, r1
 8003126:	80fb      	strh	r3, [r7, #6]
 8003128:	4613      	mov	r3, r2
 800312a:	717b      	strb	r3, [r7, #5]
    const modbus_register_map_t *map;
    int count;
    
    /* Select appropriate map */
    switch(reg_type) {
 800312c:	797b      	ldrb	r3, [r7, #5]
 800312e:	2b04      	cmp	r3, #4
 8003130:	d820      	bhi.n	8003174 <modbus_is_register_valid+0x58>
 8003132:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <modbus_is_register_valid+0x1c>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	0800314d 	.word	0x0800314d
 800313c:	08003157 	.word	0x08003157
 8003140:	08003175 	.word	0x08003175
 8003144:	08003161 	.word	0x08003161
 8003148:	0800316b 	.word	0x0800316b
        case 0:  /* Coil */
            map = g_modbus_coil_map;
 800314c:	4b25      	ldr	r3, [pc, #148]	@ (80031e4 <modbus_is_register_valid+0xc8>)
 800314e:	61fb      	str	r3, [r7, #28]
            count = MODBUS_COIL_COUNT;
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
            break;
 8003154:	e010      	b.n	8003178 <modbus_is_register_valid+0x5c>
        case 1:  /* Discrete Input */
            map = g_modbus_discrete_input_map;
 8003156:	4b24      	ldr	r3, [pc, #144]	@ (80031e8 <modbus_is_register_valid+0xcc>)
 8003158:	61fb      	str	r3, [r7, #28]
            count = MODBUS_DISCRETE_INPUT_COUNT;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
            break;
 800315e:	e00b      	b.n	8003178 <modbus_is_register_valid+0x5c>
        case 3:  /* Input Register */
            map = g_modbus_input_register_map;
 8003160:	4b22      	ldr	r3, [pc, #136]	@ (80031ec <modbus_is_register_valid+0xd0>)
 8003162:	61fb      	str	r3, [r7, #28]
            count = MODBUS_INPUT_REGISTER_COUNT;
 8003164:	2303      	movs	r3, #3
 8003166:	61bb      	str	r3, [r7, #24]
            break;
 8003168:	e006      	b.n	8003178 <modbus_is_register_valid+0x5c>
        case 4:  /* Holding Register */
            map = g_modbus_holding_register_map;
 800316a:	4b21      	ldr	r3, [pc, #132]	@ (80031f0 <modbus_is_register_valid+0xd4>)
 800316c:	61fb      	str	r3, [r7, #28]
            count = MODBUS_HOLDING_REGISTER_COUNT;
 800316e:	2305      	movs	r3, #5
 8003170:	61bb      	str	r3, [r7, #24]
            break;
 8003172:	e001      	b.n	8003178 <modbus_is_register_valid+0x5c>
        default:
            return false;
 8003174:	2300      	movs	r3, #0
 8003176:	e02f      	b.n	80031d8 <modbus_is_register_valid+0xbc>
    }
    
    /* Binary search in sorted map */
    if (count == 0) return false;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <modbus_is_register_valid+0x66>
 800317e:	2300      	movs	r3, #0
 8003180:	e02a      	b.n	80031d8 <modbus_is_register_valid+0xbc>
    
    int left = 0, right = count - 1;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	3b01      	subs	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
    while (left <= right) {
 800318c:	e01f      	b.n	80031ce <modbus_is_register_valid+0xb2>
        int mid = (left + right) / 2;
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	0fda      	lsrs	r2, r3, #31
 8003196:	4413      	add	r3, r2
 8003198:	105b      	asrs	r3, r3, #1
 800319a:	60fb      	str	r3, [r7, #12]
        if (map[mid].internal_addr == addr) {
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	4413      	add	r3, r2
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	88fa      	ldrh	r2, [r7, #6]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d101      	bne.n	80031b0 <modbus_is_register_valid+0x94>
            return true;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e013      	b.n	80031d8 <modbus_is_register_valid+0xbc>
        } else if (map[mid].internal_addr < addr) {
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	4413      	add	r3, r2
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d903      	bls.n	80031c8 <modbus_is_register_valid+0xac>
            left = mid + 1;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3301      	adds	r3, #1
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	e002      	b.n	80031ce <modbus_is_register_valid+0xb2>
        } else {
            right = mid - 1;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	613b      	str	r3, [r7, #16]
    while (left <= right) {
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	dddb      	ble.n	800318e <modbus_is_register_valid+0x72>
        }
    }
    
    return false;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3724      	adds	r7, #36	@ 0x24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	08003ff0 	.word	0x08003ff0
 80031e8:	08003ff4 	.word	0x08003ff4
 80031ec:	08003fe4 	.word	0x08003fe4
 80031f0:	08003fd0 	.word	0x08003fd0

080031f4 <modbus_registers_init>:
/**
 * @brief   Initialize register values to default
 * @note    User can modify this function to set initial values
 */
void
modbus_registers_init(void) {
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
    /* Initialize register values if needed */
    /* User implementation goes here */
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <set_bit>:
static void build_exception_response(modbus_rtu_ctx_t *ctx, uint8_t exception_code);
static void send_response(modbus_rtu_ctx_t *ctx);
static bool validate_frame(modbus_rtu_ctx_t *ctx);

/* Helper Functions */
static inline void set_bit(uint8_t *array, uint16_t bit_pos, bool value) {
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
 800320c:	4613      	mov	r3, r2
 800320e:	707b      	strb	r3, [r7, #1]
    if (value)
 8003210:	787b      	ldrb	r3, [r7, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d019      	beq.n	800324a <set_bit+0x4a>
        array[bit_pos >> 3] |= (1 << (bit_pos & 0x07));
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	08db      	lsrs	r3, r3, #3
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b25a      	sxtb	r2, r3
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	2101      	movs	r1, #1
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	b25b      	sxtb	r3, r3
 8003234:	4313      	orrs	r3, r2
 8003236:	b25a      	sxtb	r2, r3
 8003238:	887b      	ldrh	r3, [r7, #2]
 800323a:	08db      	lsrs	r3, r3, #3
 800323c:	b29b      	uxth	r3, r3
 800323e:	4619      	mov	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	440b      	add	r3, r1
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]
    else
        array[bit_pos >> 3] &= ~(1 << (bit_pos & 0x07));
}
 8003248:	e01a      	b.n	8003280 <set_bit+0x80>
        array[bit_pos >> 3] &= ~(1 << (bit_pos & 0x07));
 800324a:	887b      	ldrh	r3, [r7, #2]
 800324c:	08db      	lsrs	r3, r3, #3
 800324e:	b29b      	uxth	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	b25a      	sxtb	r2, r3
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	2101      	movs	r1, #1
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	b25b      	sxtb	r3, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	b25b      	sxtb	r3, r3
 800326c:	4013      	ands	r3, r2
 800326e:	b25a      	sxtb	r2, r3
 8003270:	887b      	ldrh	r3, [r7, #2]
 8003272:	08db      	lsrs	r3, r3, #3
 8003274:	b29b      	uxth	r3, r3
 8003276:	4619      	mov	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	440b      	add	r3, r1
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	701a      	strb	r2, [r3, #0]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <get_bit>:

static inline bool get_bit(const uint8_t *array, uint16_t bit_pos) {
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	807b      	strh	r3, [r7, #2]
    return (array[bit_pos >> 3] & (1 << (bit_pos & 0x07))) != 0;
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	08db      	lsrs	r3, r3, #3
 800329a:	b29b      	uxth	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	fa42 f303 	asr.w	r3, r2, r3
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <get_register_index>:

#ifdef MODBUS_USE_REGISTER_MAPPING
/**
 * @brief   Get array index from internal address using mapping
 */
static int16_t get_register_index(uint16_t addr, uint8_t reg_type) {
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	@ 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	460a      	mov	r2, r1
 80032d2:	80fb      	strh	r3, [r7, #6]
 80032d4:	4613      	mov	r3, r2
 80032d6:	717b      	strb	r3, [r7, #5]
    extern const modbus_register_map_t g_modbus_discrete_input_map[];

    const modbus_register_map_t *map;
    int count;

    switch(reg_type) {
 80032d8:	797b      	ldrb	r3, [r7, #5]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d820      	bhi.n	8003320 <get_register_index+0x58>
 80032de:	a201      	add	r2, pc, #4	@ (adr r2, 80032e4 <get_register_index+0x1c>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	080032f9 	.word	0x080032f9
 80032e8:	08003303 	.word	0x08003303
 80032ec:	08003321 	.word	0x08003321
 80032f0:	0800330d 	.word	0x0800330d
 80032f4:	08003317 	.word	0x08003317
        case 0:
            map = g_modbus_coil_map;
 80032f8:	4b26      	ldr	r3, [pc, #152]	@ (8003394 <get_register_index+0xcc>)
 80032fa:	61fb      	str	r3, [r7, #28]
            count = MODBUS_COIL_COUNT;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61bb      	str	r3, [r7, #24]
            break;
 8003300:	e011      	b.n	8003326 <get_register_index+0x5e>
        case 1:
            map = g_modbus_discrete_input_map;
 8003302:	4b25      	ldr	r3, [pc, #148]	@ (8003398 <get_register_index+0xd0>)
 8003304:	61fb      	str	r3, [r7, #28]
            count = MODBUS_DISCRETE_INPUT_COUNT;
 8003306:	2300      	movs	r3, #0
 8003308:	61bb      	str	r3, [r7, #24]
            break;
 800330a:	e00c      	b.n	8003326 <get_register_index+0x5e>
        case 3:
            map = g_modbus_input_register_map;
 800330c:	4b23      	ldr	r3, [pc, #140]	@ (800339c <get_register_index+0xd4>)
 800330e:	61fb      	str	r3, [r7, #28]
            count = MODBUS_INPUT_REGISTER_COUNT;
 8003310:	2303      	movs	r3, #3
 8003312:	61bb      	str	r3, [r7, #24]
            break;
 8003314:	e007      	b.n	8003326 <get_register_index+0x5e>
        case 4:
            map = g_modbus_holding_register_map;
 8003316:	4b22      	ldr	r3, [pc, #136]	@ (80033a0 <get_register_index+0xd8>)
 8003318:	61fb      	str	r3, [r7, #28]
            count = MODBUS_HOLDING_REGISTER_COUNT;
 800331a:	2305      	movs	r3, #5
 800331c:	61bb      	str	r3, [r7, #24]
            break;
 800331e:	e002      	b.n	8003326 <get_register_index+0x5e>
        default:
            return -1;
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
 8003324:	e030      	b.n	8003388 <get_register_index+0xc0>
    }

    /* Binary search */
    int left = 0, right = count - 1;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	3b01      	subs	r3, #1
 800332e:	613b      	str	r3, [r7, #16]
    while (left <= right) {
 8003330:	e024      	b.n	800337c <get_register_index+0xb4>
        int mid = (left + right) / 2;
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	0fda      	lsrs	r2, r3, #31
 800333a:	4413      	add	r3, r2
 800333c:	105b      	asrs	r3, r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
        if (map[mid].internal_addr == addr) {
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	4413      	add	r3, r2
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	429a      	cmp	r2, r3
 800334e:	d106      	bne.n	800335e <get_register_index+0x96>
            return map[mid].array_index;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	885b      	ldrh	r3, [r3, #2]
 800335a:	b21b      	sxth	r3, r3
 800335c:	e014      	b.n	8003388 <get_register_index+0xc0>
        } else if (map[mid].internal_addr < addr) {
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	429a      	cmp	r2, r3
 800336c:	d903      	bls.n	8003376 <get_register_index+0xae>
            left = mid + 1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3301      	adds	r3, #1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e002      	b.n	800337c <get_register_index+0xb4>
        } else {
            right = mid - 1;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3b01      	subs	r3, #1
 800337a:	613b      	str	r3, [r7, #16]
    while (left <= right) {
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	ddd6      	ble.n	8003332 <get_register_index+0x6a>
        }
    }

    return -1;
 8003384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003388:	4618      	mov	r0, r3
 800338a:	3724      	adds	r7, #36	@ 0x24
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	08003ff0 	.word	0x08003ff0
 8003398:	08003ff4 	.word	0x08003ff4
 800339c:	08003fe4 	.word	0x08003fe4
 80033a0:	08003fd0 	.word	0x08003fd0

080033a4 <modbus_rtu_init>:

/**
 * @brief   Initialize Modbus RTU context
 */
void
modbus_rtu_init(modbus_rtu_ctx_t *ctx, uint8_t slave_id, bool is_master, uint32_t baudrate) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	72fb      	strb	r3, [r7, #11]
 80033b2:	4613      	mov	r3, r2
 80033b4:	72bb      	strb	r3, [r7, #10]
    memset(ctx, 0, sizeof(modbus_rtu_ctx_t));
 80033b6:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 80033ba:	2100      	movs	r1, #0
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 fdb9 	bl	8003f34 <memset>

    ctx->slave_id = slave_id;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	7afa      	ldrb	r2, [r7, #11]
 80033c6:	701a      	strb	r2, [r3, #0]
    ctx->is_master = is_master;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	7aba      	ldrb	r2, [r7, #10]
 80033cc:	705a      	strb	r2, [r3, #1]
    ctx->baudrate = baudrate;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	605a      	str	r2, [r3, #4]
    ctx->t15_us = MODBUS_RTU_T15_US(baudrate);
 80033d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003408 <modbus_rtu_init+0x64>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	609a      	str	r2, [r3, #8]
    ctx->t35_us = MODBUS_RTU_T35_US(baudrate);
 80033e0:	4a0a      	ldr	r2, [pc, #40]	@ (800340c <modbus_rtu_init+0x68>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	60da      	str	r2, [r3, #12]
    ctx->state = MODBUS_STATE_IDLE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	741a      	strb	r2, [r3, #16]
    ctx->timeout_ms = 1000;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033f8:	615a      	str	r2, [r3, #20]

    modbus_registers_init();
 80033fa:	f7ff fefb 	bl	80031f4 <modbus_registers_init>
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	00e4e1c0 	.word	0x00e4e1c0
 800340c:	02160ec0 	.word	0x02160ec0

08003410 <modbus_rtu_set_callbacks>:

/**
 * @brief   Set TX start/end callbacks
 */
void
modbus_rtu_set_callbacks(modbus_rtu_ctx_t *ctx, void (*tx_start)(void), void (*tx_end)(void)) {
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
    ctx->tx_start_cb = tx_start;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
    ctx->tx_end_cb = tx_end;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
	...

08003438 <modbus_rtu_calc_crc>:

/**
 * @brief   Calculate CRC-16 (Modbus)
 */
uint16_t
modbus_rtu_calc_crc(const uint8_t *buffer, uint16_t length) {
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8003444:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003448:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < length; i++) {
 800344a:	2300      	movs	r3, #0
 800344c:	81bb      	strh	r3, [r7, #12]
 800344e:	e011      	b.n	8003474 <modbus_rtu_calc_crc+0x3c>
        crc = (crc >> 8) ^ crc16_table[(crc ^ buffer[i]) & 0xFF];
 8003450:	89fb      	ldrh	r3, [r7, #14]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	b29a      	uxth	r2, r3
 8003456:	89fb      	ldrh	r3, [r7, #14]
 8003458:	89b9      	ldrh	r1, [r7, #12]
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4401      	add	r1, r0
 800345e:	7809      	ldrb	r1, [r1, #0]
 8003460:	404b      	eors	r3, r1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4908      	ldr	r1, [pc, #32]	@ (8003488 <modbus_rtu_calc_crc+0x50>)
 8003466:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800346a:	4053      	eors	r3, r2
 800346c:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 800346e:	89bb      	ldrh	r3, [r7, #12]
 8003470:	3301      	adds	r3, #1
 8003472:	81bb      	strh	r3, [r7, #12]
 8003474:	89ba      	ldrh	r2, [r7, #12]
 8003476:	887b      	ldrh	r3, [r7, #2]
 8003478:	429a      	cmp	r2, r3
 800347a:	d3e9      	bcc.n	8003450 <modbus_rtu_calc_crc+0x18>
    }

    return crc;
 800347c:	89fb      	ldrh	r3, [r7, #14]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	08003ff8 	.word	0x08003ff8

0800348c <modbus_rtu_check_crc>:

/**
 * @brief   Check CRC-16
 */
bool
modbus_rtu_check_crc(const uint8_t *buffer, uint16_t length) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	807b      	strh	r3, [r7, #2]
    if (length < 4) return false;
 8003498:	887b      	ldrh	r3, [r7, #2]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d801      	bhi.n	80034a2 <modbus_rtu_check_crc+0x16>
 800349e:	2300      	movs	r3, #0
 80034a0:	e020      	b.n	80034e4 <modbus_rtu_check_crc+0x58>

    uint16_t calc_crc = modbus_rtu_calc_crc(buffer, length - 2);
 80034a2:	887b      	ldrh	r3, [r7, #2]
 80034a4:	3b02      	subs	r3, #2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ffc4 	bl	8003438 <modbus_rtu_calc_crc>
 80034b0:	4603      	mov	r3, r0
 80034b2:	81fb      	strh	r3, [r7, #14]
    uint16_t recv_crc = buffer[length - 2] | (buffer[length - 1] << 8);
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	3b02      	subs	r3, #2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	b21a      	sxth	r2, r3
 80034c0:	887b      	ldrh	r3, [r7, #2]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	440b      	add	r3, r1
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	b21b      	sxth	r3, r3
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	b21b      	sxth	r3, r3
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b21b      	sxth	r3, r3
 80034d4:	81bb      	strh	r3, [r7, #12]

    return (calc_crc == recv_crc);
 80034d6:	89fa      	ldrh	r2, [r7, #14]
 80034d8:	89bb      	ldrh	r3, [r7, #12]
 80034da:	429a      	cmp	r2, r3
 80034dc:	bf0c      	ite	eq
 80034de:	2301      	moveq	r3, #1
 80034e0:	2300      	movne	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <modbus_rtu_rx_byte>:

/**
 * @brief   Receive byte callback (called from ISR)
 */
void
modbus_rtu_rx_byte(modbus_rtu_ctx_t *ctx, uint8_t byte) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
    if (ctx->rx_length < MODBUS_MAX_ADU_LENGTH) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 80034fe:	2bff      	cmp	r3, #255	@ 0xff
 8003500:	d815      	bhi.n	800352e <modbus_rtu_rx_byte+0x42>
        ctx->rx_buffer[ctx->rx_length++] = byte;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	b291      	uxth	r1, r2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	f8a2 1118 	strh.w	r1, [r2, #280]	@ 0x118
 8003512:	461a      	mov	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	761a      	strb	r2, [r3, #24]
        ctx->rx_timestamp = modbus_port_get_time_us();
 800351c:	f7ff fd12 	bl	8002f44 <modbus_port_get_time_us>
 8003520:	4602      	mov	r2, r0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        ctx->state = MODBUS_STATE_RECEIVING;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	741a      	strb	r2, [r3, #16]
    }
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <modbus_rtu_timer_callback>:

/**
 * @brief   Timer callback for T3.5 timeout (called from timer ISR)
 */
void
modbus_rtu_timer_callback(modbus_rtu_ctx_t *ctx) {
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
    uint32_t elapsed = modbus_port_get_time_us() - ctx->rx_timestamp;
 800353e:	f7ff fd01 	bl	8002f44 <modbus_port_get_time_us>
 8003542:	4602      	mov	r2, r0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	60fb      	str	r3, [r7, #12]

    if (ctx->state == MODBUS_STATE_RECEIVING && elapsed >= ctx->t35_us) {
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7c1b      	ldrb	r3, [r3, #16]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <modbus_rtu_timer_callback+0x30>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	429a      	cmp	r2, r3
 800355e:	d302      	bcc.n	8003566 <modbus_rtu_timer_callback+0x30>
        ctx->state = MODBUS_STATE_PROCESSING;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	741a      	strb	r2, [r3, #16]
    }
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <modbus_rtu_slave_process>:

/**
 * @brief   Process received frame (Slave mode)
 */
void
modbus_rtu_slave_process(modbus_rtu_ctx_t *ctx) {
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
    if (ctx->state != MODBUS_STATE_PROCESSING)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7c1b      	ldrb	r3, [r3, #16]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d156      	bne.n	800362c <modbus_rtu_slave_process+0xbe>
        return;

    if (!validate_frame(ctx)) {
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f858 	bl	8003634 <validate_frame>
 8003584:	4603      	mov	r3, r0
 8003586:	f083 0301 	eor.w	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <modbus_rtu_slave_process+0x32>
        ctx->state = MODBUS_STATE_IDLE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	741a      	strb	r2, [r3, #16]
        ctx->rx_length = 0;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
        return;
 800359e:	e046      	b.n	800362e <modbus_rtu_slave_process+0xc0>
    }

    if (ctx->rx_buffer[0] != ctx->slave_id && ctx->rx_buffer[0] != 0) {
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7e1a      	ldrb	r2, [r3, #24]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d00b      	beq.n	80035c4 <modbus_rtu_slave_process+0x56>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	7e1b      	ldrb	r3, [r3, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <modbus_rtu_slave_process+0x56>
        ctx->state = MODBUS_STATE_IDLE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	741a      	strb	r2, [r3, #16]
        ctx->rx_length = 0;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
        return;
 80035c2:	e034      	b.n	800362e <modbus_rtu_slave_process+0xc0>
    }

    ctx->current_frame.slave_id = ctx->rx_buffer[0];
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7e1a      	ldrb	r2, [r3, #24]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    ctx->current_frame.function_code = ctx->rx_buffer[1];
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7e5a      	ldrb	r2, [r3, #25]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225
    ctx->current_frame.start_addr = (ctx->rx_buffer[2] << 8) | ctx->rx_buffer[3];
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7e9b      	ldrb	r3, [r3, #26]
 80035dc:	b21b      	sxth	r3, r3
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	b21a      	sxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7edb      	ldrb	r3, [r3, #27]
 80035e6:	b21b      	sxth	r3, r3
 80035e8:	4313      	orrs	r3, r2
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8a3 2226 	strh.w	r2, [r3, #550]	@ 0x226
    ctx->current_frame.count = (ctx->rx_buffer[4] << 8) | ctx->rx_buffer[5];
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7f1b      	ldrb	r3, [r3, #28]
 80035f8:	b21b      	sxth	r3, r3
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	b21a      	sxth	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	7f5b      	ldrb	r3, [r3, #29]
 8003602:	b21b      	sxth	r3, r3
 8003604:	4313      	orrs	r3, r2
 8003606:	b21b      	sxth	r3, r3
 8003608:	b29a      	uxth	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8a3 2228 	strh.w	r2, [r3, #552]	@ 0x228

    process_received_frame(ctx);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f829 	bl	8003668 <process_received_frame>
    send_response(ctx);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fad5 	bl	8003bc6 <send_response>

    ctx->state = MODBUS_STATE_IDLE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	741a      	strb	r2, [r3, #16]
    ctx->rx_length = 0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
 800362a:	e000      	b.n	800362e <modbus_rtu_slave_process+0xc0>
        return;
 800362c:	bf00      	nop
}
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <validate_frame>:

/**
 * @brief   Validate received frame
 */
static bool
validate_frame(modbus_rtu_ctx_t *ctx) {
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
    if (ctx->rx_length < MODBUS_RTU_FRAME_MIN_SIZE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8003642:	2b03      	cmp	r3, #3
 8003644:	d801      	bhi.n	800364a <validate_frame+0x16>
        return false;
 8003646:	2300      	movs	r3, #0
 8003648:	e00a      	b.n	8003660 <validate_frame+0x2c>

    return modbus_rtu_check_crc(ctx->rx_buffer, ctx->rx_length);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f103 0218 	add.w	r2, r3, #24
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f7ff ff17 	bl	800348c <modbus_rtu_check_crc>
 800365e:	4603      	mov	r3, r0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <process_received_frame>:

/**
 * @brief   Process received frame based on function code
 */
static void
process_received_frame(modbus_rtu_ctx_t *ctx) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	@ 0x30
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
    uint8_t fc = ctx->current_frame.function_code;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3225 	ldrb.w	r3, [r3, #549]	@ 0x225
 8003676:	77fb      	strb	r3, [r7, #31]
    uint16_t addr = ctx->current_frame.start_addr;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8b3 3226 	ldrh.w	r3, [r3, #550]	@ 0x226
 800367e:	83bb      	strh	r3, [r7, #28]
    uint16_t count = ctx->current_frame.count;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8b3 3228 	ldrh.w	r3, [r3, #552]	@ 0x228
 8003686:	837b      	strh	r3, [r7, #26]

    ctx->tx_buffer[0] = ctx->slave_id;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	781a      	ldrb	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    ctx->tx_buffer[1] = fc;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	7ffa      	ldrb	r2, [r7, #31]
 8003696:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
    ctx->tx_length = 2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220

    switch (fc) {
 80036a2:	7ffb      	ldrb	r3, [r7, #31]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	f200 8264 	bhi.w	8003b74 <process_received_frame+0x50c>
 80036ac:	a201      	add	r2, pc, #4	@ (adr r2, 80036b4 <process_received_frame+0x4c>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036f5 	.word	0x080036f5
 80036b8:	080036f5 	.word	0x080036f5
 80036bc:	0800380d 	.word	0x0800380d
 80036c0:	0800380d 	.word	0x0800380d
 80036c4:	08003909 	.word	0x08003909
 80036c8:	08003987 	.word	0x08003987
 80036cc:	08003b75 	.word	0x08003b75
 80036d0:	08003b75 	.word	0x08003b75
 80036d4:	08003b75 	.word	0x08003b75
 80036d8:	08003b75 	.word	0x08003b75
 80036dc:	08003b75 	.word	0x08003b75
 80036e0:	08003b75 	.word	0x08003b75
 80036e4:	08003b75 	.word	0x08003b75
 80036e8:	08003b75 	.word	0x08003b75
 80036ec:	080039e1 	.word	0x080039e1
 80036f0:	08003ab1 	.word	0x08003ab1
        case MODBUS_FC_READ_COILS:
        case MODBUS_FC_READ_DISCRETE_INPUTS: {
            uint8_t reg_type = (fc == MODBUS_FC_READ_COILS) ? 0 : 1;
 80036f4:	7ffb      	ldrb	r3, [r7, #31]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	bf14      	ite	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	2300      	moveq	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	73bb      	strb	r3, [r7, #14]
            uint8_t byte_count = (count + 7) / 8;
 8003702:	8b7b      	ldrh	r3, [r7, #26]
 8003704:	3307      	adds	r3, #7
 8003706:	2b00      	cmp	r3, #0
 8003708:	da00      	bge.n	800370c <process_received_frame+0xa4>
 800370a:	3307      	adds	r3, #7
 800370c:	10db      	asrs	r3, r3, #3
 800370e:	737b      	strb	r3, [r7, #13]

            if (count == 0 || count > 2000) {
 8003710:	8b7b      	ldrh	r3, [r7, #26]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <process_received_frame+0xb6>
 8003716:	8b7b      	ldrh	r3, [r7, #26]
 8003718:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800371c:	d904      	bls.n	8003728 <process_received_frame+0xc0>
                build_exception_response(ctx, MODBUS_EX_ILLEGAL_DATA_VALUE);
 800371e:	2103      	movs	r1, #3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fa2f 	bl	8003b84 <build_exception_response>
                return;
 8003726:	e22a      	b.n	8003b7e <process_received_frame+0x516>
            }

            for (uint16_t i = 0; i < count; i++) {
 8003728:	2300      	movs	r3, #0
 800372a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800372c:	e016      	b.n	800375c <process_received_frame+0xf4>
                if (!modbus_is_register_valid(addr + i, reg_type)) {
 800372e:	8bba      	ldrh	r2, [r7, #28]
 8003730:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003732:	4413      	add	r3, r2
 8003734:	b29b      	uxth	r3, r3
 8003736:	7bba      	ldrb	r2, [r7, #14]
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fcee 	bl	800311c <modbus_is_register_valid>
 8003740:	4603      	mov	r3, r0
 8003742:	f083 0301 	eor.w	r3, r3, #1
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <process_received_frame+0xee>
                    build_exception_response(ctx, MODBUS_EX_ILLEGAL_DATA_ADDRESS);
 800374c:	2102      	movs	r1, #2
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa18 	bl	8003b84 <build_exception_response>
                    return;
 8003754:	e213      	b.n	8003b7e <process_received_frame+0x516>
            for (uint16_t i = 0; i < count; i++) {
 8003756:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003758:	3301      	adds	r3, #1
 800375a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800375c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800375e:	8b7b      	ldrh	r3, [r7, #26]
 8003760:	429a      	cmp	r2, r3
 8003762:	d3e4      	bcc.n	800372e <process_received_frame+0xc6>
                }
            }

            ctx->tx_buffer[2] = byte_count;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	7b7a      	ldrb	r2, [r7, #13]
 8003768:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
            ctx->tx_length = 3;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2203      	movs	r2, #3
 8003770:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220

            for (uint16_t i = 0; i < count; i++) {
 8003774:	2300      	movs	r3, #0
 8003776:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8003778:	e039      	b.n	80037ee <process_received_frame+0x186>
                bool value;
                if (fc == MODBUS_FC_READ_COILS)
 800377a:	7ffb      	ldrb	r3, [r7, #31]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10a      	bne.n	8003796 <process_received_frame+0x12e>
                    modbus_rtu_get_coil(addr + i, &value);
 8003780:	8bba      	ldrh	r2, [r7, #28]
 8003782:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003784:	4413      	add	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	f107 020c 	add.w	r2, r7, #12
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fa6a 	bl	8003c68 <modbus_rtu_get_coil>
 8003794:	e009      	b.n	80037aa <process_received_frame+0x142>
                else
                    modbus_rtu_get_discrete_input(addr + i, &value);
 8003796:	8bba      	ldrh	r2, [r7, #28]
 8003798:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800379a:	4413      	add	r3, r2
 800379c:	b29b      	uxth	r3, r3
 800379e:	f107 020c 	add.w	r2, r7, #12
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fabf 	bl	8003d28 <modbus_rtu_get_discrete_input>

                if (value)
 80037aa:	7b3b      	ldrb	r3, [r7, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01b      	beq.n	80037e8 <process_received_frame+0x180>
                    ctx->tx_buffer[3 + (i >> 3)] |= (1 << (i & 0x07));
 80037b0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80037b2:	08db      	lsrs	r3, r3, #3
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3303      	adds	r3, #3
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 80037c0:	b25a      	sxtb	r2, r3
 80037c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	2101      	movs	r1, #1
 80037ca:	fa01 f303 	lsl.w	r3, r1, r3
 80037ce:	b25b      	sxtb	r3, r3
 80037d0:	4313      	orrs	r3, r2
 80037d2:	b25a      	sxtb	r2, r3
 80037d4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3303      	adds	r3, #3
 80037dc:	b2d1      	uxtb	r1, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	460a      	mov	r2, r1
 80037e4:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
            for (uint16_t i = 0; i < count; i++) {
 80037e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80037ea:	3301      	adds	r3, #1
 80037ec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80037ee:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80037f0:	8b7b      	ldrh	r3, [r7, #26]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d3c1      	bcc.n	800377a <process_received_frame+0x112>
            }
            ctx->tx_length += byte_count;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8b3 2220 	ldrh.w	r2, [r3, #544]	@ 0x220
 80037fc:	7b7b      	ldrb	r3, [r7, #13]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	4413      	add	r3, r2
 8003802:	b29a      	uxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220
            break;
 800380a:	e1b8      	b.n	8003b7e <process_received_frame+0x516>
        }

        case MODBUS_FC_READ_HOLDING_REGISTERS:
        case MODBUS_FC_READ_INPUT_REGISTERS: {
            uint8_t reg_type = (fc == MODBUS_FC_READ_HOLDING_REGISTERS) ? 4 : 3;
 800380c:	7ffb      	ldrb	r3, [r7, #31]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d101      	bne.n	8003816 <process_received_frame+0x1ae>
 8003812:	2304      	movs	r3, #4
 8003814:	e000      	b.n	8003818 <process_received_frame+0x1b0>
 8003816:	2303      	movs	r3, #3
 8003818:	73fb      	strb	r3, [r7, #15]

            if (count == 0 || count > 125) {
 800381a:	8b7b      	ldrh	r3, [r7, #26]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <process_received_frame+0x1be>
 8003820:	8b7b      	ldrh	r3, [r7, #26]
 8003822:	2b7d      	cmp	r3, #125	@ 0x7d
 8003824:	d904      	bls.n	8003830 <process_received_frame+0x1c8>
                build_exception_response(ctx, MODBUS_EX_ILLEGAL_DATA_VALUE);
 8003826:	2103      	movs	r1, #3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f9ab 	bl	8003b84 <build_exception_response>
                return;
 800382e:	e1a6      	b.n	8003b7e <process_received_frame+0x516>
            }

            for (uint16_t i = 0; i < count; i++) {
 8003830:	2300      	movs	r3, #0
 8003832:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003834:	e016      	b.n	8003864 <process_received_frame+0x1fc>
                if (!modbus_is_register_valid(addr + i, reg_type)) {
 8003836:	8bba      	ldrh	r2, [r7, #28]
 8003838:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800383a:	4413      	add	r3, r2
 800383c:	b29b      	uxth	r3, r3
 800383e:	7bfa      	ldrb	r2, [r7, #15]
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fc6a 	bl	800311c <modbus_is_register_valid>
 8003848:	4603      	mov	r3, r0
 800384a:	f083 0301 	eor.w	r3, r3, #1
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d004      	beq.n	800385e <process_received_frame+0x1f6>
                    build_exception_response(ctx, MODBUS_EX_ILLEGAL_DATA_ADDRESS);
 8003854:	2102      	movs	r1, #2
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f994 	bl	8003b84 <build_exception_response>
                    return;
 800385c:	e18f      	b.n	8003b7e <process_received_frame+0x516>
            for (uint16_t i = 0; i < count; i++) {
 800385e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003860:	3301      	adds	r3, #1
 8003862:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003864:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003866:	8b7b      	ldrh	r3, [r7, #26]
 8003868:	429a      	cmp	r2, r3
 800386a:	d3e4      	bcc.n	8003836 <process_received_frame+0x1ce>
                }
            }

            ctx->tx_buffer[2] = count * 2;
 800386c:	8b7b      	ldrh	r3, [r7, #26]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
            ctx->tx_length = 3;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2203      	movs	r2, #3
 800387e:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220

            for (uint16_t i = 0; i < count; i++) {
 8003882:	2300      	movs	r3, #0
 8003884:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003886:	e03a      	b.n	80038fe <process_received_frame+0x296>
                uint16_t value;
                if (fc == MODBUS_FC_READ_HOLDING_REGISTERS)
 8003888:	7ffb      	ldrb	r3, [r7, #31]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d10a      	bne.n	80038a4 <process_received_frame+0x23c>
                    modbus_rtu_get_holding_register(addr + i, &value);
 800388e:	8bba      	ldrh	r2, [r7, #28]
 8003890:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003892:	4413      	add	r3, r2
 8003894:	b29b      	uxth	r3, r3
 8003896:	f107 020a 	add.w	r2, r7, #10
 800389a:	4611      	mov	r1, r2
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fa73 	bl	8003d88 <modbus_rtu_get_holding_register>
 80038a2:	e009      	b.n	80038b8 <process_received_frame+0x250>
                else
                    modbus_rtu_get_input_register(addr + i, &value);
 80038a4:	8bba      	ldrh	r2, [r7, #28]
 80038a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80038a8:	4413      	add	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f107 020a 	add.w	r2, r7, #10
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fac6 	bl	8003e44 <modbus_rtu_get_input_register>

                ctx->tx_buffer[ctx->tx_length++] = value >> 8;
 80038b8:	897b      	ldrh	r3, [r7, #10]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	b298      	uxth	r0, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8b3 3220 	ldrh.w	r3, [r3, #544]	@ 0x220
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	b291      	uxth	r1, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	f8a2 1220 	strh.w	r1, [r2, #544]	@ 0x220
 80038ce:	4619      	mov	r1, r3
 80038d0:	b2c2      	uxtb	r2, r0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	440b      	add	r3, r1
 80038d6:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
                ctx->tx_buffer[ctx->tx_length++] = value & 0xFF;
 80038da:	8978      	ldrh	r0, [r7, #10]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8b3 3220 	ldrh.w	r3, [r3, #544]	@ 0x220
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	b291      	uxth	r1, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	f8a2 1220 	strh.w	r1, [r2, #544]	@ 0x220
 80038ec:	4619      	mov	r1, r3
 80038ee:	b2c2      	uxtb	r2, r0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	440b      	add	r3, r1
 80038f4:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
            for (uint16_t i = 0; i < count; i++) {
 80038f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80038fa:	3301      	adds	r3, #1
 80038fc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80038fe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003900:	8b7b      	ldrh	r3, [r7, #26]
 8003902:	429a      	cmp	r2, r3
 8003904:	d3c0      	bcc.n	8003888 <process_received_frame+0x220>
            }
            break;
 8003906:	e13a      	b.n	8003b7e <process_received_frame+0x516>
        }

        case MODBUS_FC_WRITE_SINGLE_COIL: {
            if (!modbus_is_register_valid(addr, 0)) {
 8003908:	8bbb      	ldrh	r3, [r7, #28]
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fc05 	bl	800311c <modbus_is_register_valid>
 8003912:	4603      	mov	r3, r0
 8003914:	f083 0301 	eor.w	r3, r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d004      	beq.n	8003928 <process_received_frame+0x2c0>
                build_exception_response(ctx, MODBUS_EX_ILLEGAL_DATA_ADDRESS);
 800391e:	2102      	movs	r1, #2
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f92f 	bl	8003b84 <build_exception_response>
                return;
 8003926:	e12a      	b.n	8003b7e <process_received_frame+0x516>
            }

            uint16_t value = (ctx->rx_buffer[4] << 8) | ctx->rx_buffer[5];
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	7f1b      	ldrb	r3, [r3, #28]
 800392c:	b21b      	sxth	r3, r3
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	b21a      	sxth	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	7f5b      	ldrb	r3, [r3, #29]
 8003936:	b21b      	sxth	r3, r3
 8003938:	4313      	orrs	r3, r2
 800393a:	b21b      	sxth	r3, r3
 800393c:	823b      	strh	r3, [r7, #16]
            if (value != 0x0000 && value != 0xFF00) {
 800393e:	8a3b      	ldrh	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <process_received_frame+0x2ee>
 8003944:	8a3b      	ldrh	r3, [r7, #16]
 8003946:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 800394a:	d004      	beq.n	8003956 <process_received_frame+0x2ee>
                build_exception_response(ctx, MODBUS_EX_ILLEGAL_DATA_VALUE);
 800394c:	2103      	movs	r1, #3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f918 	bl	8003b84 <build_exception_response>
                return;
 8003954:	e113      	b.n	8003b7e <process_received_frame+0x516>
            }

            modbus_rtu_set_coil(addr, value == 0xFF00);
 8003956:	8a3b      	ldrh	r3, [r7, #16]
 8003958:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 800395c:	bf0c      	ite	eq
 800395e:	2301      	moveq	r3, #1
 8003960:	2300      	movne	r3, #0
 8003962:	b2da      	uxtb	r2, r3
 8003964:	8bbb      	ldrh	r3, [r7, #28]
 8003966:	4611      	mov	r1, r2
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f9ad 	bl	8003cc8 <modbus_rtu_set_coil>

            memcpy(&ctx->tx_buffer[2], &ctx->rx_buffer[2], 4);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	321a      	adds	r2, #26
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	601a      	str	r2, [r3, #0]
            ctx->tx_length = 6;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2206      	movs	r2, #6
 8003980:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220
            break;
 8003984:	e0fb      	b.n	8003b7e <process_received_frame+0x516>
        }

        case MODBUS_FC_WRITE_SINGLE_REGISTER: {
            if (!modbus_is_register_valid(addr, 4)) {
 8003986:	8bbb      	ldrh	r3, [r7, #28]
 8003988:	2104      	movs	r1, #4
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fbc6 	bl	800311c <modbus_is_register_valid>
 8003990:	4603      	mov	r3, r0
 8003992:	f083 0301 	eor.w	r3, r3, #1
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d004      	beq.n	80039a6 <process_received_frame+0x33e>
                build_exception_response(ctx, MODBUS_EX_ILLEGAL_DATA_ADDRESS);
 800399c:	2102      	movs	r1, #2
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f8f0 	bl	8003b84 <build_exception_response>
                return;
 80039a4:	e0eb      	b.n	8003b7e <process_received_frame+0x516>
            }

            uint16_t value = (ctx->rx_buffer[4] << 8) | ctx->rx_buffer[5];
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	7f1b      	ldrb	r3, [r3, #28]
 80039aa:	b21b      	sxth	r3, r3
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	b21a      	sxth	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	7f5b      	ldrb	r3, [r3, #29]
 80039b4:	b21b      	sxth	r3, r3
 80039b6:	4313      	orrs	r3, r2
 80039b8:	b21b      	sxth	r3, r3
 80039ba:	827b      	strh	r3, [r7, #18]
            modbus_rtu_set_holding_register(addr, value);
 80039bc:	8a7a      	ldrh	r2, [r7, #18]
 80039be:	8bbb      	ldrh	r3, [r7, #28]
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fa0e 	bl	8003de4 <modbus_rtu_set_holding_register>

            memcpy(&ctx->tx_buffer[2], &ctx->rx_buffer[2], 4);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	321a      	adds	r2, #26
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	601a      	str	r2, [r3, #0]
            ctx->tx_length = 6;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2206      	movs	r2, #6
 80039da:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220
            break;
 80039de:	e0ce      	b.n	8003b7e <process_received_frame+0x516>
        }

        case MODBUS_FC_WRITE_MULTIPLE_COILS: {
            uint8_t byte_count = ctx->rx_buffer[6];
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7f9b      	ldrb	r3, [r3, #30]
 80039e4:	757b      	strb	r3, [r7, #21]

            if (count == 0 || count > 1968 || byte_count != (count + 7) / 8) {
 80039e6:	8b7b      	ldrh	r3, [r7, #26]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00c      	beq.n	8003a06 <process_received_frame+0x39e>
 80039ec:	8b7b      	ldrh	r3, [r7, #26]
 80039ee:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 80039f2:	d808      	bhi.n	8003a06 <process_received_frame+0x39e>
 80039f4:	7d7a      	ldrb	r2, [r7, #21]
 80039f6:	8b7b      	ldrh	r3, [r7, #26]
 80039f8:	3307      	adds	r3, #7
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	da00      	bge.n	8003a00 <process_received_frame+0x398>
 80039fe:	3307      	adds	r3, #7
 8003a00:	10db      	asrs	r3, r3, #3
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d004      	beq.n	8003a10 <process_received_frame+0x3a8>
                build_exception_response(ctx, MODBUS_EX_ILLEGAL_DATA_VALUE);
 8003a06:	2103      	movs	r1, #3
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8bb 	bl	8003b84 <build_exception_response>
                return;
 8003a0e:	e0b6      	b.n	8003b7e <process_received_frame+0x516>
            }

            for (uint16_t i = 0; i < count; i++) {
 8003a10:	2300      	movs	r3, #0
 8003a12:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003a14:	e015      	b.n	8003a42 <process_received_frame+0x3da>
                if (!modbus_is_register_valid(addr + i, 0)) {
 8003a16:	8bba      	ldrh	r2, [r7, #28]
 8003a18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003a1a:	4413      	add	r3, r2
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fb7b 	bl	800311c <modbus_is_register_valid>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f083 0301 	eor.w	r3, r3, #1
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d004      	beq.n	8003a3c <process_received_frame+0x3d4>
                    build_exception_response(ctx, MODBUS_EX_ILLEGAL_DATA_ADDRESS);
 8003a32:	2102      	movs	r1, #2
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f8a5 	bl	8003b84 <build_exception_response>
                    return;
 8003a3a:	e0a0      	b.n	8003b7e <process_received_frame+0x516>
            for (uint16_t i = 0; i < count; i++) {
 8003a3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003a3e:	3301      	adds	r3, #1
 8003a40:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003a42:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003a44:	8b7b      	ldrh	r3, [r7, #26]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d3e5      	bcc.n	8003a16 <process_received_frame+0x3ae>
                }
            }

            for (uint16_t i = 0; i < count; i++) {
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003a4e:	e01f      	b.n	8003a90 <process_received_frame+0x428>
                bool value = (ctx->rx_buffer[7 + (i >> 3)] & (1 << (i & 0x07))) != 0;
 8003a50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a52:	08db      	lsrs	r3, r3, #3
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3307      	adds	r3, #7
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	7e1b      	ldrb	r3, [r3, #24]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	fa42 f303 	asr.w	r3, r2, r3
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bf14      	ite	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	2300      	moveq	r3, #0
 8003a76:	753b      	strb	r3, [r7, #20]
                modbus_rtu_set_coil(addr + i, value);
 8003a78:	8bba      	ldrh	r2, [r7, #28]
 8003a7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a7c:	4413      	add	r3, r2
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	7d3a      	ldrb	r2, [r7, #20]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f91f 	bl	8003cc8 <modbus_rtu_set_coil>
            for (uint16_t i = 0; i < count; i++) {
 8003a8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003a90:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a92:	8b7b      	ldrh	r3, [r7, #26]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d3db      	bcc.n	8003a50 <process_received_frame+0x3e8>
            }

            memcpy(&ctx->tx_buffer[2], &ctx->rx_buffer[2], 4);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	321a      	adds	r2, #26
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	601a      	str	r2, [r3, #0]
            ctx->tx_length = 6;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2206      	movs	r2, #6
 8003aaa:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220
            break;
 8003aae:	e066      	b.n	8003b7e <process_received_frame+0x516>
        }

        case MODBUS_FC_WRITE_MULTIPLE_REGISTERS: {
            uint8_t byte_count = ctx->rx_buffer[6];
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	7f9b      	ldrb	r3, [r3, #30]
 8003ab4:	767b      	strb	r3, [r7, #25]

            if (count == 0 || count > 123 || byte_count != count * 2) {
 8003ab6:	8b7b      	ldrh	r3, [r7, #26]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <process_received_frame+0x464>
 8003abc:	8b7b      	ldrh	r3, [r7, #26]
 8003abe:	2b7b      	cmp	r3, #123	@ 0x7b
 8003ac0:	d804      	bhi.n	8003acc <process_received_frame+0x464>
 8003ac2:	7e7a      	ldrb	r2, [r7, #25]
 8003ac4:	8b7b      	ldrh	r3, [r7, #26]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d004      	beq.n	8003ad6 <process_received_frame+0x46e>
                build_exception_response(ctx, MODBUS_EX_ILLEGAL_DATA_VALUE);
 8003acc:	2103      	movs	r1, #3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f858 	bl	8003b84 <build_exception_response>
                return;
 8003ad4:	e053      	b.n	8003b7e <process_received_frame+0x516>
            }

            for (uint16_t i = 0; i < count; i++) {
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003ada:	e015      	b.n	8003b08 <process_received_frame+0x4a0>
                if (!modbus_is_register_valid(addr + i, 4)) {
 8003adc:	8bba      	ldrh	r2, [r7, #28]
 8003ade:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003ae0:	4413      	add	r3, r2
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2104      	movs	r1, #4
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fb18 	bl	800311c <modbus_is_register_valid>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f083 0301 	eor.w	r3, r3, #1
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <process_received_frame+0x49a>
                    build_exception_response(ctx, MODBUS_EX_ILLEGAL_DATA_ADDRESS);
 8003af8:	2102      	movs	r1, #2
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f842 	bl	8003b84 <build_exception_response>
                    return;
 8003b00:	e03d      	b.n	8003b7e <process_received_frame+0x516>
            for (uint16_t i = 0; i < count; i++) {
 8003b02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003b04:	3301      	adds	r3, #1
 8003b06:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003b08:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003b0a:	8b7b      	ldrh	r3, [r7, #26]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d3e5      	bcc.n	8003adc <process_received_frame+0x474>
                }
            }

            for (uint16_t i = 0; i < count; i++) {
 8003b10:	2300      	movs	r3, #0
 8003b12:	843b      	strh	r3, [r7, #32]
 8003b14:	e01e      	b.n	8003b54 <process_received_frame+0x4ec>
                uint16_t value = (ctx->rx_buffer[7 + i * 2] << 8) | ctx->rx_buffer[8 + i * 2];
 8003b16:	8c3b      	ldrh	r3, [r7, #32]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	3307      	adds	r3, #7
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	7e1b      	ldrb	r3, [r3, #24]
 8003b22:	b21b      	sxth	r3, r3
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	b21a      	sxth	r2, r3
 8003b28:	8c3b      	ldrh	r3, [r7, #32]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	440b      	add	r3, r1
 8003b32:	7e1b      	ldrb	r3, [r3, #24]
 8003b34:	b21b      	sxth	r3, r3
 8003b36:	4313      	orrs	r3, r2
 8003b38:	b21b      	sxth	r3, r3
 8003b3a:	82fb      	strh	r3, [r7, #22]
                modbus_rtu_set_holding_register(addr + i, value);
 8003b3c:	8bba      	ldrh	r2, [r7, #28]
 8003b3e:	8c3b      	ldrh	r3, [r7, #32]
 8003b40:	4413      	add	r3, r2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	8afa      	ldrh	r2, [r7, #22]
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f94b 	bl	8003de4 <modbus_rtu_set_holding_register>
            for (uint16_t i = 0; i < count; i++) {
 8003b4e:	8c3b      	ldrh	r3, [r7, #32]
 8003b50:	3301      	adds	r3, #1
 8003b52:	843b      	strh	r3, [r7, #32]
 8003b54:	8c3a      	ldrh	r2, [r7, #32]
 8003b56:	8b7b      	ldrh	r3, [r7, #26]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d3dc      	bcc.n	8003b16 <process_received_frame+0x4ae>
            }

            memcpy(&ctx->tx_buffer[2], &ctx->rx_buffer[2], 4);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	321a      	adds	r2, #26
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	601a      	str	r2, [r3, #0]
            ctx->tx_length = 6;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2206      	movs	r2, #6
 8003b6e:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220
            break;
 8003b72:	e004      	b.n	8003b7e <process_received_frame+0x516>
        }

        default:
            build_exception_response(ctx, MODBUS_EX_ILLEGAL_FUNCTION);
 8003b74:	2101      	movs	r1, #1
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f804 	bl	8003b84 <build_exception_response>
            break;
 8003b7c:	bf00      	nop
    }
}
 8003b7e:	3730      	adds	r7, #48	@ 0x30
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <build_exception_response>:

/**
 * @brief   Build exception response
 */
static void
build_exception_response(modbus_rtu_ctx_t *ctx, uint8_t exception_code) {
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
    ctx->tx_buffer[0] = ctx->slave_id;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	781a      	ldrb	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    ctx->tx_buffer[1] = ctx->current_frame.function_code | 0x80;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3225 	ldrb.w	r3, [r3, #549]	@ 0x225
 8003ba0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
    ctx->tx_buffer[2] = exception_code;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    ctx->tx_length = 3;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <send_response>:

/**
 * @brief   Send response frame
 */
static void
send_response(modbus_rtu_ctx_t *ctx) {
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
    uint16_t crc = modbus_rtu_calc_crc(ctx->tx_buffer, ctx->tx_length);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8b3 3220 	ldrh.w	r3, [r3, #544]	@ 0x220
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f7ff fc2b 	bl	8003438 <modbus_rtu_calc_crc>
 8003be2:	4603      	mov	r3, r0
 8003be4:	81fb      	strh	r3, [r7, #14]
    ctx->tx_buffer[ctx->tx_length++] = crc & 0xFF;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8b3 3220 	ldrh.w	r3, [r3, #544]	@ 0x220
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	b291      	uxth	r1, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	f8a2 1220 	strh.w	r1, [r2, #544]	@ 0x220
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	89fb      	ldrh	r3, [r7, #14]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	440b      	add	r3, r1
 8003c00:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    ctx->tx_buffer[ctx->tx_length++] = crc >> 8;
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	b298      	uxth	r0, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8b3 3220 	ldrh.w	r3, [r3, #544]	@ 0x220
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	b291      	uxth	r1, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	f8a2 1220 	strh.w	r1, [r2, #544]	@ 0x220
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	b2c2      	uxtb	r2, r0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	440b      	add	r3, r1
 8003c22:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

    if (ctx->tx_start_cb)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <send_response+0x72>
        ctx->tx_start_cb();
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8003c36:	4798      	blx	r3

    modbus_port_send(ctx->tx_buffer, ctx->tx_length);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8b3 3220 	ldrh.w	r3, [r3, #544]	@ 0x220
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f7ff f96a 	bl	8002f20 <modbus_port_send>

    if (ctx->tx_end_cb)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <send_response+0x98>
        ctx->tx_end_cb();
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 8003c5c:	4798      	blx	r3
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <modbus_rtu_get_coil>:

/* Data Access Functions */
bool modbus_rtu_get_coil(uint16_t addr, bool *value) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	6039      	str	r1, [r7, #0]
 8003c72:	80fb      	strh	r3, [r7, #6]
    if (!modbus_is_register_valid(addr, 0)) return false;
 8003c74:	88fb      	ldrh	r3, [r7, #6]
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fa4f 	bl	800311c <modbus_is_register_valid>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f083 0301 	eor.w	r3, r3, #1
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <modbus_rtu_get_coil+0x26>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e016      	b.n	8003cbc <modbus_rtu_get_coil+0x54>

#ifdef MODBUS_USE_REGISTER_MAPPING
    int16_t idx = get_register_index(addr, 0);
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	2100      	movs	r1, #0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fb18 	bl	80032c8 <get_register_index>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	81fb      	strh	r3, [r7, #14]
    if (idx < 0) return false;
 8003c9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	da01      	bge.n	8003ca8 <modbus_rtu_get_coil+0x40>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e009      	b.n	8003cbc <modbus_rtu_get_coil+0x54>
    *value = get_bit(g_coils, idx);
 8003ca8:	89fb      	ldrh	r3, [r7, #14]
 8003caa:	4619      	mov	r1, r3
 8003cac:	4805      	ldr	r0, [pc, #20]	@ (8003cc4 <modbus_rtu_get_coil+0x5c>)
 8003cae:	f7ff faec 	bl	800328a <get_bit>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	701a      	strb	r2, [r3, #0]
#else
    if (addr >= MODBUS_MAX_COILS) return false;
    *value = get_bit(g_coils, addr);
#endif
    return true;
 8003cba:	2301      	movs	r3, #1
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000164 	.word	0x20000164

08003cc8 <modbus_rtu_set_coil>:

bool modbus_rtu_set_coil(uint16_t addr, bool value) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	460a      	mov	r2, r1
 8003cd2:	80fb      	strh	r3, [r7, #6]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	717b      	strb	r3, [r7, #5]
    if (!modbus_is_register_valid(addr, 0)) return false;
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fa1d 	bl	800311c <modbus_is_register_valid>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f083 0301 	eor.w	r3, r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <modbus_rtu_set_coil+0x2a>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e013      	b.n	8003d1a <modbus_rtu_set_coil+0x52>

#ifdef MODBUS_USE_REGISTER_MAPPING
    int16_t idx = get_register_index(addr, 0);
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fae6 	bl	80032c8 <get_register_index>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	81fb      	strh	r3, [r7, #14]
    if (idx < 0) return false;
 8003d00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	da01      	bge.n	8003d0c <modbus_rtu_set_coil+0x44>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e006      	b.n	8003d1a <modbus_rtu_set_coil+0x52>
    set_bit(g_coils, idx, value);
 8003d0c:	89fb      	ldrh	r3, [r7, #14]
 8003d0e:	797a      	ldrb	r2, [r7, #5]
 8003d10:	4619      	mov	r1, r3
 8003d12:	4804      	ldr	r0, [pc, #16]	@ (8003d24 <modbus_rtu_set_coil+0x5c>)
 8003d14:	f7ff fa74 	bl	8003200 <set_bit>
#else
    if (addr >= MODBUS_MAX_COILS) return false;
    set_bit(g_coils, addr, value);
#endif
    return true;
 8003d18:	2301      	movs	r3, #1
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000164 	.word	0x20000164

08003d28 <modbus_rtu_get_discrete_input>:

bool modbus_rtu_get_discrete_input(uint16_t addr, bool *value) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	80fb      	strh	r3, [r7, #6]
    if (!modbus_is_register_valid(addr, 1)) return false;
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	2101      	movs	r1, #1
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff f9ef 	bl	800311c <modbus_is_register_valid>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f083 0301 	eor.w	r3, r3, #1
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <modbus_rtu_get_discrete_input+0x26>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e016      	b.n	8003d7c <modbus_rtu_get_discrete_input+0x54>

#ifdef MODBUS_USE_REGISTER_MAPPING
    int16_t idx = get_register_index(addr, 1);
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	2101      	movs	r1, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fab8 	bl	80032c8 <get_register_index>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	81fb      	strh	r3, [r7, #14]
    if (idx < 0) return false;
 8003d5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	da01      	bge.n	8003d68 <modbus_rtu_get_discrete_input+0x40>
 8003d64:	2300      	movs	r3, #0
 8003d66:	e009      	b.n	8003d7c <modbus_rtu_get_discrete_input+0x54>
    *value = get_bit(g_discrete_inputs, idx);
 8003d68:	89fb      	ldrh	r3, [r7, #14]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4805      	ldr	r0, [pc, #20]	@ (8003d84 <modbus_rtu_get_discrete_input+0x5c>)
 8003d6e:	f7ff fa8c 	bl	800328a <get_bit>
 8003d72:	4603      	mov	r3, r0
 8003d74:	461a      	mov	r2, r3
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	701a      	strb	r2, [r3, #0]
#else
    if (addr >= MODBUS_MAX_DISCRETE_INPUTS) return false;
    *value = get_bit(g_discrete_inputs, addr);
#endif
    return true;
 8003d7a:	2301      	movs	r3, #1
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000168 	.word	0x20000168

08003d88 <modbus_rtu_get_holding_register>:
    set_bit(g_discrete_inputs, addr, value);
#endif
    return true;
}

bool modbus_rtu_get_holding_register(uint16_t addr, uint16_t *value) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	6039      	str	r1, [r7, #0]
 8003d92:	80fb      	strh	r3, [r7, #6]
    if (!modbus_is_register_valid(addr, 4)) return false;
 8003d94:	88fb      	ldrh	r3, [r7, #6]
 8003d96:	2104      	movs	r1, #4
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff f9bf 	bl	800311c <modbus_is_register_valid>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f083 0301 	eor.w	r3, r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <modbus_rtu_get_holding_register+0x26>
 8003daa:	2300      	movs	r3, #0
 8003dac:	e014      	b.n	8003dd8 <modbus_rtu_get_holding_register+0x50>

#ifdef MODBUS_USE_REGISTER_MAPPING
    int16_t idx = get_register_index(addr, 4);
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2104      	movs	r1, #4
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fa88 	bl	80032c8 <get_register_index>
 8003db8:	4603      	mov	r3, r0
 8003dba:	81fb      	strh	r3, [r7, #14]
    if (idx < 0) return false;
 8003dbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	da01      	bge.n	8003dc8 <modbus_rtu_get_holding_register+0x40>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e007      	b.n	8003dd8 <modbus_rtu_get_holding_register+0x50>
    *value = g_holding_registers[idx];
 8003dc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003dcc:	4a04      	ldr	r2, [pc, #16]	@ (8003de0 <modbus_rtu_get_holding_register+0x58>)
 8003dce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	801a      	strh	r2, [r3, #0]
#else
    if (addr >= MODBUS_MAX_HOLDING_REGISTERS) return false;
    *value = g_holding_registers[addr];
#endif
    return true;
 8003dd6:	2301      	movs	r3, #1
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000150 	.word	0x20000150

08003de4 <modbus_rtu_set_holding_register>:

bool modbus_rtu_set_holding_register(uint16_t addr, uint16_t value) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	460a      	mov	r2, r1
 8003dee:	80fb      	strh	r3, [r7, #6]
 8003df0:	4613      	mov	r3, r2
 8003df2:	80bb      	strh	r3, [r7, #4]
    if (!modbus_is_register_valid(addr, 4)) return false;
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	2104      	movs	r1, #4
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff f98f 	bl	800311c <modbus_is_register_valid>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f083 0301 	eor.w	r3, r3, #1
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <modbus_rtu_set_holding_register+0x2a>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e013      	b.n	8003e36 <modbus_rtu_set_holding_register+0x52>

#ifdef MODBUS_USE_REGISTER_MAPPING
    int16_t idx = get_register_index(addr, 4);
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2104      	movs	r1, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fa58 	bl	80032c8 <get_register_index>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	81fb      	strh	r3, [r7, #14]
    if (idx < 0) return false;
 8003e1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	da01      	bge.n	8003e28 <modbus_rtu_set_holding_register+0x44>
 8003e24:	2300      	movs	r3, #0
 8003e26:	e006      	b.n	8003e36 <modbus_rtu_set_holding_register+0x52>
    g_holding_registers[idx] = value;
 8003e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e2c:	4904      	ldr	r1, [pc, #16]	@ (8003e40 <modbus_rtu_set_holding_register+0x5c>)
 8003e2e:	88ba      	ldrh	r2, [r7, #4]
 8003e30:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
#else
    if (addr >= MODBUS_MAX_HOLDING_REGISTERS) return false;
    g_holding_registers[addr] = value;
#endif
    return true;
 8003e34:	2301      	movs	r3, #1
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000150 	.word	0x20000150

08003e44 <modbus_rtu_get_input_register>:

bool modbus_rtu_get_input_register(uint16_t addr, uint16_t *value) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	80fb      	strh	r3, [r7, #6]
    if (!modbus_is_register_valid(addr, 3)) return false;
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	2103      	movs	r1, #3
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff f961 	bl	800311c <modbus_is_register_valid>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f083 0301 	eor.w	r3, r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <modbus_rtu_get_input_register+0x26>
 8003e66:	2300      	movs	r3, #0
 8003e68:	e014      	b.n	8003e94 <modbus_rtu_get_input_register+0x50>

#ifdef MODBUS_USE_REGISTER_MAPPING
    int16_t idx = get_register_index(addr, 3);
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2103      	movs	r1, #3
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fa2a 	bl	80032c8 <get_register_index>
 8003e74:	4603      	mov	r3, r0
 8003e76:	81fb      	strh	r3, [r7, #14]
    if (idx < 0) return false;
 8003e78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	da01      	bge.n	8003e84 <modbus_rtu_get_input_register+0x40>
 8003e80:	2300      	movs	r3, #0
 8003e82:	e007      	b.n	8003e94 <modbus_rtu_get_input_register+0x50>
    *value = g_input_registers[idx];
 8003e84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e88:	4a04      	ldr	r2, [pc, #16]	@ (8003e9c <modbus_rtu_get_input_register+0x58>)
 8003e8a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	801a      	strh	r2, [r3, #0]
#else
    if (addr >= MODBUS_MAX_INPUT_REGISTERS) return false;
    *value = g_input_registers[addr];
#endif
    return true;
 8003e92:	2301      	movs	r3, #1
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	2000015c 	.word	0x2000015c

08003ea0 <modbus_easy_init>:
extern void modbus_port_rs485_rx_enable(void);

/**
 * @brief   Easy init - Chỉ 1 dòng code!
 */
void modbus_easy_init(uint8_t slave_id, uint32_t baudrate) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	6039      	str	r1, [r7, #0]
 8003eaa:	71fb      	strb	r3, [r7, #7]
    /* 1. Init Modbus context */
    modbus_rtu_init(&g_modbus_ctx, slave_id, false, baudrate);
 8003eac:	79f9      	ldrb	r1, [r7, #7]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	480f      	ldr	r0, [pc, #60]	@ (8003ef0 <modbus_easy_init+0x50>)
 8003eb4:	f7ff fa76 	bl	80033a4 <modbus_rtu_init>

    /* 2. Set RS485 callbacks */
    modbus_rtu_set_callbacks(&g_modbus_ctx,
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef4 <modbus_easy_init+0x54>)
 8003eba:	490f      	ldr	r1, [pc, #60]	@ (8003ef8 <modbus_easy_init+0x58>)
 8003ebc:	480c      	ldr	r0, [pc, #48]	@ (8003ef0 <modbus_easy_init+0x50>)
 8003ebe:	f7ff faa7 	bl	8003410 <modbus_rtu_set_callbacks>
                            modbus_port_rs485_tx_enable,
                            modbus_port_rs485_rx_enable);

    /* 3. Init UART với Even parity, 1 stop bit */
    modbus_port_uart_init(baudrate, 2, 1);
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	6838      	ldr	r0, [r7, #0]
 8003ec8:	f7fe ffcc 	bl	8002e64 <modbus_port_uart_init>

    /* 4. Init Timer T3.5 */
    modbus_port_timer_init(g_modbus_ctx.t35_us);
 8003ecc:	4b08      	ldr	r3, [pc, #32]	@ (8003ef0 <modbus_easy_init+0x50>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff f859 	bl	8002f88 <modbus_port_timer_init>

    /* 5. Start timer */
    modbus_port_timer_enable(true);
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	f7ff f8bc 	bl	8003054 <modbus_port_timer_enable>

    /* 6. Set RX mode */
    modbus_port_rs485_rx_enable();
 8003edc:	f7ff f8ee 	bl	80030bc <modbus_port_rs485_rx_enable>

    g_easy_initialized = true;
 8003ee0:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <modbus_easy_init+0x5c>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	2000016c 	.word	0x2000016c
 8003ef4:	080030bd 	.word	0x080030bd
 8003ef8:	08003089 	.word	0x08003089
 8003efc:	200003a8 	.word	0x200003a8

08003f00 <modbus_easy_poll>:

void modbus_easy_poll(void) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
    // DEBUG: Kiểm tra context
    if (&g_modbus_ctx == NULL) {
        Error_Handler();  // Context NULL!
    }

    if (!g_easy_initialized) {
 8003f04:	4b09      	ldr	r3, [pc, #36]	@ (8003f2c <modbus_easy_poll+0x2c>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	f083 0301 	eor.w	r3, r3, #1
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <modbus_easy_poll+0x26>
        return;
    }

    // DEBUG: Kiểm tra state hợp lệ
    if (g_modbus_ctx.state > MODBUS_STATE_ERROR) {
 8003f12:	4b07      	ldr	r3, [pc, #28]	@ (8003f30 <modbus_easy_poll+0x30>)
 8003f14:	7c1b      	ldrb	r3, [r3, #16]
 8003f16:	2b05      	cmp	r3, #5
 8003f18:	d901      	bls.n	8003f1e <modbus_easy_poll+0x1e>
        Error_Handler();  // State không hợp lệ!
 8003f1a:	f7fc fa25 	bl	8000368 <Error_Handler>
    }

    /* Process Modbus slave */
    modbus_rtu_slave_process(&g_modbus_ctx);
 8003f1e:	4804      	ldr	r0, [pc, #16]	@ (8003f30 <modbus_easy_poll+0x30>)
 8003f20:	f7ff fb25 	bl	800356e <modbus_rtu_slave_process>
 8003f24:	e000      	b.n	8003f28 <modbus_easy_poll+0x28>
        return;
 8003f26:	bf00      	nop
}
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200003a8 	.word	0x200003a8
 8003f30:	2000016c 	.word	0x2000016c

08003f34 <memset>:
 8003f34:	4603      	mov	r3, r0
 8003f36:	4402      	add	r2, r0
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d100      	bne.n	8003f3e <memset+0xa>
 8003f3c:	4770      	bx	lr
 8003f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f42:	e7f9      	b.n	8003f38 <memset+0x4>

08003f44 <__libc_init_array>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	2600      	movs	r6, #0
 8003f48:	4d0c      	ldr	r5, [pc, #48]	@ (8003f7c <__libc_init_array+0x38>)
 8003f4a:	4c0d      	ldr	r4, [pc, #52]	@ (8003f80 <__libc_init_array+0x3c>)
 8003f4c:	1b64      	subs	r4, r4, r5
 8003f4e:	10a4      	asrs	r4, r4, #2
 8003f50:	42a6      	cmp	r6, r4
 8003f52:	d109      	bne.n	8003f68 <__libc_init_array+0x24>
 8003f54:	f000 f81a 	bl	8003f8c <_init>
 8003f58:	2600      	movs	r6, #0
 8003f5a:	4d0a      	ldr	r5, [pc, #40]	@ (8003f84 <__libc_init_array+0x40>)
 8003f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8003f88 <__libc_init_array+0x44>)
 8003f5e:	1b64      	subs	r4, r4, r5
 8003f60:	10a4      	asrs	r4, r4, #2
 8003f62:	42a6      	cmp	r6, r4
 8003f64:	d105      	bne.n	8003f72 <__libc_init_array+0x2e>
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6c:	4798      	blx	r3
 8003f6e:	3601      	adds	r6, #1
 8003f70:	e7ee      	b.n	8003f50 <__libc_init_array+0xc>
 8003f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f76:	4798      	blx	r3
 8003f78:	3601      	adds	r6, #1
 8003f7a:	e7f2      	b.n	8003f62 <__libc_init_array+0x1e>
 8003f7c:	080041f8 	.word	0x080041f8
 8003f80:	080041f8 	.word	0x080041f8
 8003f84:	080041f8 	.word	0x080041f8
 8003f88:	080041fc 	.word	0x080041fc

08003f8c <_init>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	bf00      	nop
 8003f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f92:	bc08      	pop	{r3}
 8003f94:	469e      	mov	lr, r3
 8003f96:	4770      	bx	lr

08003f98 <_fini>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr
