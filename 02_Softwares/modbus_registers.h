/**
 * \file            modbus_registers.h
 * \brief           Modbus register mapping definitions
 */

/*
 * Copyright (c) 2025 Pham Nam Hien
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
 * AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * This file is part of Modbus RTU library.
 *
 * Author:          Generated by Modbus Configuration Tool
 */
#ifndef MODBUS_REGISTERS_H
#define MODBUS_REGISTERS_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/**
 * \brief           Enable optimized register mapping mode
 */
#define MODBUS_USE_REGISTER_MAPPING                 (1)

/* Configuration settings - Variables (can be modified at runtime) */

/* External variable declarations for configuration */
extern uint32_t modbus_baudrate;
extern uint32_t modbus_data_bits;
extern uint32_t modbus_parity;
extern uint32_t modbus_stop_bits;

/* Device type */
#define MODBUS_DEVICE_TYPE_SLAVE                    (1)

/* Slave-specific configuration variables */
extern uint32_t modbus_slave_id;
extern uint32_t modbus_response_delay_ms;

/* Register counts (optimized memory) */
#define MODBUS_COIL_COUNT                           (7)
#define MODBUS_DISCRETE_INPUT_COUNT                 (3)
#define MODBUS_INPUT_REGISTER_COUNT                 (4)
#define MODBUS_HOLDING_REGISTER_COUNT               (3)

/* Register internal address definitions */

/* Holding Register internal addresses */
#define HR_0000_ADDR                             (0    )  /* Internal addr 0 */
#define HR_0001_ADDR                             (1    )  /* Internal addr 1 */
#define HR_0002_ADDR                             (2    )  /* Internal addr 2 */

/* Input Register internal addresses */
#define IR_0000_ADDR                             (0    )  /* Internal addr 0 */
#define IR_0003_ADDR                             (3    )  /* Internal addr 3 */
#define IR_0004_ADDR                             (4    )  /* Internal addr 4 */
#define IR_0100_ADDR                             (100  )  /* Internal addr 100 */

/* Coil internal addresses */
#define COIL_0000_ADDR                           (0    )  /* Internal addr 0 */
#define COIL_0001_ADDR                           (1    )  /* Internal addr 1 */
#define COIL_0002_ADDR                           (2    )  /* Internal addr 2 */
#define COIL_0003_ADDR                           (3    )  /* Internal addr 3 */
#define COIL_0004_ADDR                           (4    )  /* Internal addr 4 */
#define COIL_0005_ADDR                           (5    )  /* Internal addr 5 */
#define COIL_0006_ADDR                           (6    )  /* Internal addr 6 */

/* Discrete Input internal addresses */
#define DI_0000_ADDR                             (0    )  /* Internal addr 0 */
#define DI_0001_ADDR                             (1    )  /* Internal addr 1 */
#define DI_0002_ADDR                             (2    )  /* Internal addr 2 */

/* Register mapping indices */
/* Use these indices to access g_modbus_xxx_registers[] arrays */
#define HR_0000_IDX                              (0)
#define HR_0001_IDX                              (1)
#define HR_0002_IDX                              (2)
#define IR_0000_IDX                              (0)
#define IR_0003_IDX                              (1)
#define IR_0004_IDX                              (2)
#define IR_0100_IDX                              (3)
#define COIL_0000_IDX                            (0)
#define COIL_0001_IDX                            (1)
#define COIL_0002_IDX                            (2)
#define COIL_0003_IDX                            (3)
#define COIL_0004_IDX                            (4)
#define COIL_0005_IDX                            (5)
#define COIL_0006_IDX                            (6)
#define DI_0000_IDX                              (0)
#define DI_0001_IDX                              (1)
#define DI_0002_IDX                              (2)

/* Direct access macros - use these for easy register access */
/* Example: TEMPERATURE = 34; instead of g_modbus_holding_registers[TEMPERATURE_IDX] = 34; */

/* Holding Register access macros */
#define HR_0000                                  g_modbus_holding_registers[HR_0000_IDX]
#define HR_0001                                  g_modbus_holding_registers[HR_0001_IDX]
#define HR_0002                                  g_modbus_holding_registers[HR_0002_IDX]

/* Input Register access macros */
#define IR_0000                                  g_modbus_input_registers[IR_0000_IDX]
#define IR_0003                                  g_modbus_input_registers[IR_0003_IDX]
#define IR_0004                                  g_modbus_input_registers[IR_0004_IDX]
#define IR_0100                                  g_modbus_input_registers[IR_0100_IDX]

/* Coil access macros (bit access) */
#define COIL_0000_SET()                        (g_modbus_coils[0] |= (1 << 0))
#define COIL_0000_CLR()                        (g_modbus_coils[0] &= ~(1 << 0))
#define COIL_0000_READ()                       ((g_modbus_coils[0] >> 0) & 1)
#define COIL_0001_SET()                        (g_modbus_coils[0] |= (1 << 1))
#define COIL_0001_CLR()                        (g_modbus_coils[0] &= ~(1 << 1))
#define COIL_0001_READ()                       ((g_modbus_coils[0] >> 1) & 1)
#define COIL_0002_SET()                        (g_modbus_coils[0] |= (1 << 2))
#define COIL_0002_CLR()                        (g_modbus_coils[0] &= ~(1 << 2))
#define COIL_0002_READ()                       ((g_modbus_coils[0] >> 2) & 1)
#define COIL_0003_SET()                        (g_modbus_coils[0] |= (1 << 3))
#define COIL_0003_CLR()                        (g_modbus_coils[0] &= ~(1 << 3))
#define COIL_0003_READ()                       ((g_modbus_coils[0] >> 3) & 1)
#define COIL_0004_SET()                        (g_modbus_coils[0] |= (1 << 4))
#define COIL_0004_CLR()                        (g_modbus_coils[0] &= ~(1 << 4))
#define COIL_0004_READ()                       ((g_modbus_coils[0] >> 4) & 1)
#define COIL_0005_SET()                        (g_modbus_coils[0] |= (1 << 5))
#define COIL_0005_CLR()                        (g_modbus_coils[0] &= ~(1 << 5))
#define COIL_0005_READ()                       ((g_modbus_coils[0] >> 5) & 1)
#define COIL_0006_SET()                        (g_modbus_coils[0] |= (1 << 6))
#define COIL_0006_CLR()                        (g_modbus_coils[0] &= ~(1 << 6))
#define COIL_0006_READ()                       ((g_modbus_coils[0] >> 6) & 1)

/* Discrete Input access macros (bit access) */
#define DI_0000_SET()                          (g_modbus_discrete_inputs[0] |= (1 << 0))
#define DI_0000_CLR()                          (g_modbus_discrete_inputs[0] &= ~(1 << 0))
#define DI_0000_READ()                         ((g_modbus_discrete_inputs[0] >> 0) & 1)
#define DI_0001_SET()                          (g_modbus_discrete_inputs[0] |= (1 << 1))
#define DI_0001_CLR()                          (g_modbus_discrete_inputs[0] &= ~(1 << 1))
#define DI_0001_READ()                         ((g_modbus_discrete_inputs[0] >> 1) & 1)
#define DI_0002_SET()                          (g_modbus_discrete_inputs[0] |= (1 << 2))
#define DI_0002_CLR()                          (g_modbus_discrete_inputs[0] &= ~(1 << 2))
#define DI_0002_READ()                         ((g_modbus_discrete_inputs[0] >> 2) & 1)

/* Register ranges configuration */
#define MODBUS_REGISTER_RANGES_COUNT                (6)

/**
 * \brief           Register range structure
 */
typedef struct {
    uint16_t start_addr;                            /* Starting internal address */
    uint16_t count;                                 /* Number of consecutive registers */
    uint8_t  reg_type;                              /* Register type (0=coil, 1=DI, 3=IR, 4=HR) */
} modbus_register_range_t;

/**
 * \brief           Register mapping structure
 */
typedef struct {
    uint16_t internal_addr;                         /* Internal address (for Modbus protocol) */
    uint16_t array_index;                           /* Index in data array */
} modbus_register_map_t;

/* External variable declarations */
extern const modbus_register_range_t g_modbus_register_ranges[];
extern const modbus_register_map_t g_modbus_holding_register_map[];
extern const modbus_register_map_t g_modbus_input_register_map[];
extern const modbus_register_map_t g_modbus_coil_map[];
extern const modbus_register_map_t g_modbus_discrete_input_map[];

extern uint16_t g_modbus_holding_registers[];
extern uint16_t g_modbus_input_registers[];
extern uint8_t  g_modbus_coils[];
extern uint8_t  g_modbus_discrete_inputs[];

/* Function prototypes */
uint8_t     modbus_is_register_valid(uint16_t addr, uint8_t reg_type);
int32_t     modbus_get_register_ranges(const modbus_register_range_t** ranges);
void        modbus_registers_init(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* MODBUS_REGISTERS_H */
